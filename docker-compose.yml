version: "3.7"

services:
  postgres:
    restart: always
    build:
      context: ./docker/docker-postgresql-multiple-databases-master
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - database
      - hydra
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=${POSTGRES_MULTIPLE_DATABASES}
    ports: 
      - 5432:5432

  redis:
    restart: always
    image: redis:alpine
    networks:
      - redis
    volumes:
      - redis-data:/data

  hydra:
    restart: always
    build:
      context: ./docker/hydra
    depends_on:
      - postgres
    networks:
      - hydra
    ports:
      - 4444:4444
    environment:
      - SECRETS_SYSTEM=${SECRETS_SYSTEM}
      - DSN=${DSN}
      - URLS_SELF_ISSUER=${URLS_SELF_ISSUER}
      - URLS_CONSENT=${URLS_CONSENT}
      - URLS_LOGIN=${URLS_LOGIN}
      - SERVE_PUBLIC_CORS_ALLOWED_ORIGINS=${HYDRA_CORS_ALLOWED_ORIGINS}

  oauth2backend:
    restart: always
    depends_on:
      - postgres
    build:
      context: ./oauth2/oauth2backend
    # ports:
    #   - ${OB_PORT}:${OB_PORT}
    volumes:
      - yarn-cache:/usr/local/share/.cache/yarn/v6
    networks:
      - hydra
      - database
      - frontend
    environment:
      - PORT=${OB_PORT}
      - HOST=${OB_HOST}
      - FRONT_ROOT=${OB_FRONT_ROOT}
      - HYDRA_ADMIN_URL=${HYDRA_ADMIN_URL}
      - NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
      - SSO_MODE=${OB_SSO_MODE}

  oauth2frontend:
    restart: always
    build:
      context: ./oauth2/oauth2frontend
    networks:
      - frontend
    ports:
      - 80:80
    volumes:
      - yarn-cache:/usr/local/share/.cache/yarn/v6

  exam-front:
    restart: always
    build:
      context: ./exam/exam-front
    networks:
      - frontend
    ports:
      - 3000:3000
    volumes:
      - yarn-cache:/usr/local/share/.cache/yarn/v6

  exam-back:
    depends_on:
      - postgres
      - redis
    restart: always
    networks:
      - database
      - hydra
      - backend
      - redis
      - theia-containers
    build:
      context: ./exam/exam-back
    volumes:
      - yarn-cache:/usr/local/share/.cache/yarn/v6
      - exam-storage:/exam
      - /var/run/docker.sock:/var/run/docker.sock
    ports: 
      - 3336:3336

  exam-ws:
    depends_on:
      - exam-back
      - redis
    restart: always
    networks:
      - redis
      - backend
      - theia-containers
    build:
      context: ./exam/exam-ws
    volumes:
      - yarn-cache:/usr/local/share/.cache/yarn/v6
    environment:
      - VUE_APP_BACKEND_URL=${VUE_APP_BACKEND_URL_INTERNAL}
      - REDIS_HOST=${REDIS_HOST}
      - NODE_TLS_REJECT_UNAUTHORIZED=${NODE_TLS_REJECT_UNAUTHORIZED}
    ports: 
      - 3001:3001

  openresty:
    restart: always
    depends_on:
      - exam-back
      - redis
    networks:
      - theia-containers
      - redis
    build:
      context: ./exam/openresty
    ports:
      - 3011:80

networks:
  database:
  hydra:
  frontend:
  redis:
  backend:
  theia-containers:

volumes:
  postgres-data:
  redis-data:
  yarn-cache:
  exam-storage:
