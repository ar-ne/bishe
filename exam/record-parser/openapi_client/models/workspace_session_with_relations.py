# coding: utf-8

"""
    exam-back

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class WorkspaceSessionWithRelations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'token': 'str',
        'container_id': 'str',
        'address': 'str',
        'project_archive': 'str',
        'enable_track': 'bool'
    }

    attribute_map = {
        'token': 'token',
        'container_id': 'containerID',
        'address': 'address',
        'project_archive': 'projectArchive',
        'enable_track': 'enableTrack'
    }

    def __init__(self, token=None, container_id=None, address=None, project_archive=None, enable_track=None, local_vars_configuration=None):  # noqa: E501
        """WorkspaceSessionWithRelations - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._token = None
        self._container_id = None
        self._address = None
        self._project_archive = None
        self._enable_track = None
        self.discriminator = None

        self.token = token
        if container_id is not None:
            self.container_id = container_id
        if address is not None:
            self.address = address
        if project_archive is not None:
            self.project_archive = project_archive
        self.enable_track = enable_track

    @property
    def token(self):
        """Gets the token of this WorkspaceSessionWithRelations.  # noqa: E501


        :return: The token of this WorkspaceSessionWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this WorkspaceSessionWithRelations.


        :param token: The token of this WorkspaceSessionWithRelations.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and token is None:  # noqa: E501
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def container_id(self):
        """Gets the container_id of this WorkspaceSessionWithRelations.  # noqa: E501


        :return: The container_id of this WorkspaceSessionWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this WorkspaceSessionWithRelations.


        :param container_id: The container_id of this WorkspaceSessionWithRelations.  # noqa: E501
        :type: str
        """

        self._container_id = container_id

    @property
    def address(self):
        """Gets the address of this WorkspaceSessionWithRelations.  # noqa: E501


        :return: The address of this WorkspaceSessionWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this WorkspaceSessionWithRelations.


        :param address: The address of this WorkspaceSessionWithRelations.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def project_archive(self):
        """Gets the project_archive of this WorkspaceSessionWithRelations.  # noqa: E501


        :return: The project_archive of this WorkspaceSessionWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._project_archive

    @project_archive.setter
    def project_archive(self, project_archive):
        """Sets the project_archive of this WorkspaceSessionWithRelations.


        :param project_archive: The project_archive of this WorkspaceSessionWithRelations.  # noqa: E501
        :type: str
        """

        self._project_archive = project_archive

    @property
    def enable_track(self):
        """Gets the enable_track of this WorkspaceSessionWithRelations.  # noqa: E501


        :return: The enable_track of this WorkspaceSessionWithRelations.  # noqa: E501
        :rtype: bool
        """
        return self._enable_track

    @enable_track.setter
    def enable_track(self, enable_track):
        """Sets the enable_track of this WorkspaceSessionWithRelations.


        :param enable_track: The enable_track of this WorkspaceSessionWithRelations.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and enable_track is None:  # noqa: E501
            raise ValueError("Invalid value for `enable_track`, must not be `None`")  # noqa: E501

        self._enable_track = enable_track

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkspaceSessionWithRelations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkspaceSessionWithRelations):
            return True

        return self.to_dict() != other.to_dict()
