# coding: utf-8

"""
    exam-back

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class QuestionWithRelations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'float',
        'title': 'str',
        'author': 'str',
        'score': 'str',
        'brief': 'str',
        'detail': 'str',
        'examples': 'list[object]',
        'examination': 'float',
        'template_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'author': 'author',
        'score': 'score',
        'brief': 'brief',
        'detail': 'detail',
        'examples': 'examples',
        'examination': 'examination',
        'template_name': 'templateName'
    }

    def __init__(self, id=None, title=None, author=None, score=None, brief=None, detail=None, examples=None, examination=None, template_name=None, local_vars_configuration=None):  # noqa: E501
        """QuestionWithRelations - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._title = None
        self._author = None
        self._score = None
        self._brief = None
        self._detail = None
        self._examples = None
        self._examination = None
        self._template_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.title = title
        if author is not None:
            self.author = author
        if score is not None:
            self.score = score
        if brief is not None:
            self.brief = brief
        self.detail = detail
        if examples is not None:
            self.examples = examples
        if examination is not None:
            self.examination = examination
        if template_name is not None:
            self.template_name = template_name

    @property
    def id(self):
        """Gets the id of this QuestionWithRelations.  # noqa: E501


        :return: The id of this QuestionWithRelations.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QuestionWithRelations.


        :param id: The id of this QuestionWithRelations.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this QuestionWithRelations.  # noqa: E501


        :return: The title of this QuestionWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this QuestionWithRelations.


        :param title: The title of this QuestionWithRelations.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def author(self):
        """Gets the author of this QuestionWithRelations.  # noqa: E501


        :return: The author of this QuestionWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this QuestionWithRelations.


        :param author: The author of this QuestionWithRelations.  # noqa: E501
        :type: str
        """

        self._author = author

    @property
    def score(self):
        """Gets the score of this QuestionWithRelations.  # noqa: E501


        :return: The score of this QuestionWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this QuestionWithRelations.


        :param score: The score of this QuestionWithRelations.  # noqa: E501
        :type: str
        """

        self._score = score

    @property
    def brief(self):
        """Gets the brief of this QuestionWithRelations.  # noqa: E501


        :return: The brief of this QuestionWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._brief

    @brief.setter
    def brief(self, brief):
        """Sets the brief of this QuestionWithRelations.


        :param brief: The brief of this QuestionWithRelations.  # noqa: E501
        :type: str
        """

        self._brief = brief

    @property
    def detail(self):
        """Gets the detail of this QuestionWithRelations.  # noqa: E501


        :return: The detail of this QuestionWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this QuestionWithRelations.


        :param detail: The detail of this QuestionWithRelations.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and detail is None:  # noqa: E501
            raise ValueError("Invalid value for `detail`, must not be `None`")  # noqa: E501

        self._detail = detail

    @property
    def examples(self):
        """Gets the examples of this QuestionWithRelations.  # noqa: E501


        :return: The examples of this QuestionWithRelations.  # noqa: E501
        :rtype: list[object]
        """
        return self._examples

    @examples.setter
    def examples(self, examples):
        """Sets the examples of this QuestionWithRelations.


        :param examples: The examples of this QuestionWithRelations.  # noqa: E501
        :type: list[object]
        """

        self._examples = examples

    @property
    def examination(self):
        """Gets the examination of this QuestionWithRelations.  # noqa: E501


        :return: The examination of this QuestionWithRelations.  # noqa: E501
        :rtype: float
        """
        return self._examination

    @examination.setter
    def examination(self, examination):
        """Sets the examination of this QuestionWithRelations.


        :param examination: The examination of this QuestionWithRelations.  # noqa: E501
        :type: float
        """

        self._examination = examination

    @property
    def template_name(self):
        """Gets the template_name of this QuestionWithRelations.  # noqa: E501


        :return: The template_name of this QuestionWithRelations.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this QuestionWithRelations.


        :param template_name: The template_name of this QuestionWithRelations.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuestionWithRelations):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuestionWithRelations):
            return True

        return self.to_dict() != other.to_dict()
