// tslint:disable
/**
 * exam-back
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Answer
 */
export interface Answer {
    /**
     * 
     * @type {number}
     * @memberof Answer
     */
    question: number;
    /**
     * 
     * @type {number}
     * @memberof Answer
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    user: string;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    judge?: string;
}
/**
 * 
 * @export
 * @interface AnswerFields
 */
export interface AnswerFields {
    /**
     * 
     * @type {boolean}
     * @memberof AnswerFields
     */
    question?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AnswerFields
     */
    id?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AnswerFields
     */
    content?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AnswerFields
     */
    user?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AnswerFields
     */
    judge?: boolean;
}
/**
 * 
 * @export
 * @interface AnswerFilter
 */
export interface AnswerFilter {
    /**
     * 
     * @type {number}
     * @memberof AnswerFilter
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof AnswerFilter
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof AnswerFilter
     */
    skip?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof AnswerFilter
     */
    order?: Array<string>;
    /**
     * 
     * @type {AnswerFields}
     * @memberof AnswerFilter
     */
    fields?: AnswerFields;
}
/**
 * 
 * @export
 * @interface AnswerFilter1
 */
export interface AnswerFilter1 {
    /**
     * 
     * @type {number}
     * @memberof AnswerFilter1
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof AnswerFilter1
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof AnswerFilter1
     */
    skip?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof AnswerFilter1
     */
    order?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof AnswerFilter1
     */
    where?: { [key: string]: object; };
    /**
     * 
     * @type {AnswerFields}
     * @memberof AnswerFilter1
     */
    fields?: AnswerFields;
}
/**
 * (tsType: Partial<Answer>, schemaOptions: { partial: true })
 * @export
 * @interface AnswerPartial
 */
export interface AnswerPartial {
    /**
     * 
     * @type {number}
     * @memberof AnswerPartial
     */
    question?: number;
    /**
     * 
     * @type {number}
     * @memberof AnswerPartial
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof AnswerPartial
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof AnswerPartial
     */
    user?: string;
    /**
     * 
     * @type {string}
     * @memberof AnswerPartial
     */
    judge?: string;
}
/**
 * (tsType: AnswerWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface AnswerWithRelations
 */
export interface AnswerWithRelations {
    /**
     * 
     * @type {number}
     * @memberof AnswerWithRelations
     */
    question: number;
    /**
     * 
     * @type {number}
     * @memberof AnswerWithRelations
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof AnswerWithRelations
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof AnswerWithRelations
     */
    user: string;
    /**
     * 
     * @type {string}
     * @memberof AnswerWithRelations
     */
    judge?: string;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * 
     * @type {any}
     * @memberof InlineObject
     */
    file?: any;
}
/**
 * 
 * @export
 * @interface LoopbackCount
 */
export interface LoopbackCount {
    /**
     * 
     * @type {number}
     * @memberof LoopbackCount
     */
    count?: number;
}
/**
 * (tsType: Omit<Answer, \'id\'>, schemaOptions: { title: \'NewAnswer\', exclude: [ \'id\' ] })
 * @export
 * @interface NewAnswer
 */
export interface NewAnswer {
    /**
     * 
     * @type {number}
     * @memberof NewAnswer
     */
    question: number;
    /**
     * 
     * @type {string}
     * @memberof NewAnswer
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof NewAnswer
     */
    user: string;
    /**
     * 
     * @type {string}
     * @memberof NewAnswer
     */
    judge?: string;
}
/**
 * (tsType: Omit<Question, \'id\'>, schemaOptions: { title: \'NewQuestion\', exclude: [ \'id\' ] })
 * @export
 * @interface NewQuestion
 */
export interface NewQuestion {
    /**
     * 
     * @type {string}
     * @memberof NewQuestion
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof NewQuestion
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof NewQuestion
     */
    score?: string;
    /**
     * 
     * @type {string}
     * @memberof NewQuestion
     */
    brief?: string;
    /**
     * 
     * @type {string}
     * @memberof NewQuestion
     */
    detail: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof NewQuestion
     */
    examples?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof NewQuestion
     */
    examination?: number;
    /**
     * 
     * @type {string}
     * @memberof NewQuestion
     */
    templateName?: string;
}
/**
 * (tsType: Record, schemaOptions: { title: \'NewRecord\' })
 * @export
 * @interface NewRecord
 */
export interface NewRecord {
    /**
     * 
     * @type {number}
     * @memberof NewRecord
     */
    answer: number;
    /**
     * 
     * @type {string}
     * @memberof NewRecord
     */
    startTime: string;
    /**
     * 
     * @type {string}
     * @memberof NewRecord
     */
    endTime: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NewRecord
     */
    timeline: Array<string>;
}
/**
 * (tsType: Template, schemaOptions: { title: \'NewTemplate\' })
 * @export
 * @interface NewTemplate
 */
export interface NewTemplate {
    /**
     * 
     * @type {string}
     * @memberof NewTemplate
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof NewTemplate
     */
    content: string;
}
/**
 * (tsType: TimelineAnalysis, schemaOptions: { title: \'NewTimelineAnalysis\' })
 * @export
 * @interface NewTimelineAnalysis
 */
export interface NewTimelineAnalysis {
    /**
     * 
     * @type {number}
     * @memberof NewTimelineAnalysis
     */
    record: number;
    /**
     * 
     * @type {boolean}
     * @memberof NewTimelineAnalysis
     */
    finished: boolean;
    /**
     * 
     * @type {TlaResult}
     * @memberof NewTimelineAnalysis
     */
    result?: TlaResult;
}
/**
 * 
 * @export
 * @interface PingResponse
 */
export interface PingResponse {
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    greeting?: string;
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    url?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PingResponse
     */
    headers?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface Question
 */
export interface Question {
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    score?: string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    brief?: string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    detail: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof Question
     */
    examples?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    examination?: number;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    templateName?: string;
}
/**
 * 
 * @export
 * @interface QuestionFields
 */
export interface QuestionFields {
    /**
     * 
     * @type {boolean}
     * @memberof QuestionFields
     */
    id?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionFields
     */
    title?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionFields
     */
    author?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionFields
     */
    score?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionFields
     */
    brief?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionFields
     */
    detail?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionFields
     */
    examples?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionFields
     */
    examination?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof QuestionFields
     */
    templateName?: boolean;
}
/**
 * 
 * @export
 * @interface QuestionFilter
 */
export interface QuestionFilter {
    /**
     * 
     * @type {number}
     * @memberof QuestionFilter
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof QuestionFilter
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof QuestionFilter
     */
    skip?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuestionFilter
     */
    order?: Array<string>;
    /**
     * 
     * @type {QuestionFields}
     * @memberof QuestionFilter
     */
    fields?: QuestionFields;
}
/**
 * 
 * @export
 * @interface QuestionFilter1
 */
export interface QuestionFilter1 {
    /**
     * 
     * @type {number}
     * @memberof QuestionFilter1
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof QuestionFilter1
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof QuestionFilter1
     */
    skip?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof QuestionFilter1
     */
    order?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof QuestionFilter1
     */
    where?: { [key: string]: object; };
    /**
     * 
     * @type {QuestionFields}
     * @memberof QuestionFilter1
     */
    fields?: QuestionFields;
}
/**
 * (tsType: Partial<Question>, schemaOptions: { partial: true })
 * @export
 * @interface QuestionPartial
 */
export interface QuestionPartial {
    /**
     * 
     * @type {number}
     * @memberof QuestionPartial
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionPartial
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionPartial
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionPartial
     */
    score?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionPartial
     */
    brief?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionPartial
     */
    detail?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof QuestionPartial
     */
    examples?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof QuestionPartial
     */
    examination?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionPartial
     */
    templateName?: string;
}
/**
 * (tsType: QuestionWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface QuestionWithRelations
 */
export interface QuestionWithRelations {
    /**
     * 
     * @type {number}
     * @memberof QuestionWithRelations
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionWithRelations
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionWithRelations
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionWithRelations
     */
    score?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionWithRelations
     */
    brief?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionWithRelations
     */
    detail: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof QuestionWithRelations
     */
    examples?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof QuestionWithRelations
     */
    examination?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionWithRelations
     */
    templateName?: string;
}
/**
 * 
 * @export
 * @interface Record
 */
export interface Record {
    /**
     * 
     * @type {number}
     * @memberof Record
     */
    answer: number;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    startTime: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    endTime: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Record
     */
    timeline: Array<string>;
}
/**
 * 
 * @export
 * @interface RecordFields
 */
export interface RecordFields {
    /**
     * 
     * @type {boolean}
     * @memberof RecordFields
     */
    answer?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RecordFields
     */
    startTime?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RecordFields
     */
    endTime?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RecordFields
     */
    timeline?: boolean;
}
/**
 * 
 * @export
 * @interface RecordFilter
 */
export interface RecordFilter {
    /**
     * 
     * @type {number}
     * @memberof RecordFilter
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof RecordFilter
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof RecordFilter
     */
    skip?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecordFilter
     */
    order?: Array<string>;
    /**
     * 
     * @type {RecordFields}
     * @memberof RecordFilter
     */
    fields?: RecordFields;
}
/**
 * 
 * @export
 * @interface RecordFilter1
 */
export interface RecordFilter1 {
    /**
     * 
     * @type {number}
     * @memberof RecordFilter1
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof RecordFilter1
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof RecordFilter1
     */
    skip?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecordFilter1
     */
    order?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof RecordFilter1
     */
    where?: { [key: string]: object; };
    /**
     * 
     * @type {RecordFields}
     * @memberof RecordFilter1
     */
    fields?: RecordFields;
}
/**
 * (tsType: Partial<Record>, schemaOptions: { partial: true })
 * @export
 * @interface RecordPartial
 */
export interface RecordPartial {
    /**
     * 
     * @type {number}
     * @memberof RecordPartial
     */
    answer?: number;
    /**
     * 
     * @type {string}
     * @memberof RecordPartial
     */
    startTime?: string;
    /**
     * 
     * @type {string}
     * @memberof RecordPartial
     */
    endTime?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecordPartial
     */
    timeline?: Array<string>;
}
/**
 * (tsType: RecordWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface RecordWithRelations
 */
export interface RecordWithRelations {
    /**
     * 
     * @type {number}
     * @memberof RecordWithRelations
     */
    answer: number;
    /**
     * 
     * @type {string}
     * @memberof RecordWithRelations
     */
    startTime: string;
    /**
     * 
     * @type {string}
     * @memberof RecordWithRelations
     */
    endTime: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecordWithRelations
     */
    timeline: Array<string>;
}
/**
 * 
 * @export
 * @interface Template
 */
export interface Template {
    /**
     * 
     * @type {string}
     * @memberof Template
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Template
     */
    content: string;
}
/**
 * 
 * @export
 * @interface TemplateFields
 */
export interface TemplateFields {
    /**
     * 
     * @type {boolean}
     * @memberof TemplateFields
     */
    name?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TemplateFields
     */
    content?: boolean;
}
/**
 * 
 * @export
 * @interface TemplateFilter
 */
export interface TemplateFilter {
    /**
     * 
     * @type {number}
     * @memberof TemplateFilter
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof TemplateFilter
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof TemplateFilter
     */
    skip?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof TemplateFilter
     */
    order?: Array<string>;
    /**
     * 
     * @type {TemplateFields}
     * @memberof TemplateFilter
     */
    fields?: TemplateFields;
}
/**
 * 
 * @export
 * @interface TemplateFilter1
 */
export interface TemplateFilter1 {
    /**
     * 
     * @type {number}
     * @memberof TemplateFilter1
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof TemplateFilter1
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof TemplateFilter1
     */
    skip?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof TemplateFilter1
     */
    order?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TemplateFilter1
     */
    where?: { [key: string]: object; };
    /**
     * 
     * @type {TemplateFields}
     * @memberof TemplateFilter1
     */
    fields?: TemplateFields;
}
/**
 * (tsType: Partial<Template>, schemaOptions: { partial: true })
 * @export
 * @interface TemplatePartial
 */
export interface TemplatePartial {
    /**
     * 
     * @type {string}
     * @memberof TemplatePartial
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatePartial
     */
    content?: string;
}
/**
 * (tsType: TemplateWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TemplateWithRelations
 */
export interface TemplateWithRelations {
    /**
     * 
     * @type {string}
     * @memberof TemplateWithRelations
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateWithRelations
     */
    content: string;
}
/**
 * 
 * @export
 * @interface TimelineAnalysis
 */
export interface TimelineAnalysis {
    /**
     * 
     * @type {number}
     * @memberof TimelineAnalysis
     */
    record: number;
    /**
     * 
     * @type {boolean}
     * @memberof TimelineAnalysis
     */
    finished: boolean;
    /**
     * 
     * @type {TlaResult}
     * @memberof TimelineAnalysis
     */
    result?: TlaResult;
}
/**
 * 
 * @export
 * @interface TimelineAnalysisFields
 */
export interface TimelineAnalysisFields {
    /**
     * 
     * @type {boolean}
     * @memberof TimelineAnalysisFields
     */
    record?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TimelineAnalysisFields
     */
    finished?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TimelineAnalysisFields
     */
    result?: boolean;
}
/**
 * 
 * @export
 * @interface TimelineAnalysisFilter
 */
export interface TimelineAnalysisFilter {
    /**
     * 
     * @type {number}
     * @memberof TimelineAnalysisFilter
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof TimelineAnalysisFilter
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof TimelineAnalysisFilter
     */
    skip?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof TimelineAnalysisFilter
     */
    order?: Array<string>;
    /**
     * 
     * @type {TimelineAnalysisFields}
     * @memberof TimelineAnalysisFilter
     */
    fields?: TimelineAnalysisFields;
}
/**
 * 
 * @export
 * @interface TimelineAnalysisFilter1
 */
export interface TimelineAnalysisFilter1 {
    /**
     * 
     * @type {number}
     * @memberof TimelineAnalysisFilter1
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof TimelineAnalysisFilter1
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof TimelineAnalysisFilter1
     */
    skip?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof TimelineAnalysisFilter1
     */
    order?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof TimelineAnalysisFilter1
     */
    where?: { [key: string]: object; };
    /**
     * 
     * @type {TimelineAnalysisFields}
     * @memberof TimelineAnalysisFilter1
     */
    fields?: TimelineAnalysisFields;
}
/**
 * (tsType: Partial<TimelineAnalysis>, schemaOptions: { partial: true })
 * @export
 * @interface TimelineAnalysisPartial
 */
export interface TimelineAnalysisPartial {
    /**
     * 
     * @type {number}
     * @memberof TimelineAnalysisPartial
     */
    record?: number;
    /**
     * 
     * @type {boolean}
     * @memberof TimelineAnalysisPartial
     */
    finished?: boolean;
    /**
     * 
     * @type {TlaResult}
     * @memberof TimelineAnalysisPartial
     */
    result?: TlaResult;
}
/**
 * (tsType: TimelineAnalysisWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TimelineAnalysisWithRelations
 */
export interface TimelineAnalysisWithRelations {
    /**
     * 
     * @type {number}
     * @memberof TimelineAnalysisWithRelations
     */
    record: number;
    /**
     * 
     * @type {boolean}
     * @memberof TimelineAnalysisWithRelations
     */
    finished: boolean;
    /**
     * 
     * @type {TlaResultWithRelations}
     * @memberof TimelineAnalysisWithRelations
     */
    result?: TlaResultWithRelations;
}
/**
 * 
 * @export
 * @interface TlaResult
 */
export interface TlaResult {
    /**
     * 
     * @type {number}
     * @memberof TlaResult
     */
    add?: number;
    /**
     * 
     * @type {number}
     * @memberof TlaResult
     */
    del?: number;
    /**
     * 
     * @type {Array<TlaTimelineItem>}
     * @memberof TlaResult
     */
    timeline?: Array<TlaTimelineItem>;
    /**
     * 
     * @type {number}
     * @memberof TlaResult
     */
    undo?: number;
    /**
     * 
     * @type {number}
     * @memberof TlaResult
     */
    paste?: number;
}
/**
 * (tsType: TlaResultWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TlaResultWithRelations
 */
export interface TlaResultWithRelations {
    /**
     * 
     * @type {number}
     * @memberof TlaResultWithRelations
     */
    add?: number;
    /**
     * 
     * @type {number}
     * @memberof TlaResultWithRelations
     */
    del?: number;
    /**
     * 
     * @type {Array<TlaTimelineItemWithRelations>}
     * @memberof TlaResultWithRelations
     */
    timeline?: Array<TlaTimelineItemWithRelations>;
    /**
     * 
     * @type {number}
     * @memberof TlaResultWithRelations
     */
    undo?: number;
    /**
     * 
     * @type {number}
     * @memberof TlaResultWithRelations
     */
    paste?: number;
}
/**
 * 
 * @export
 * @interface TlaTimelineItem
 */
export interface TlaTimelineItem {
    /**
     * 
     * @type {string}
     * @memberof TlaTimelineItem
     */
    action?: string;
    /**
     * 
     * @type {number}
     * @memberof TlaTimelineItem
     */
    add?: number;
    /**
     * 
     * @type {number}
     * @memberof TlaTimelineItem
     */
    del?: number;
    /**
     * 
     * @type {number}
     * @memberof TlaTimelineItem
     */
    time?: number;
}
/**
 * (tsType: TlaTimelineItemWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface TlaTimelineItemWithRelations
 */
export interface TlaTimelineItemWithRelations {
    /**
     * 
     * @type {string}
     * @memberof TlaTimelineItemWithRelations
     */
    action?: string;
    /**
     * 
     * @type {number}
     * @memberof TlaTimelineItemWithRelations
     */
    add?: number;
    /**
     * 
     * @type {number}
     * @memberof TlaTimelineItemWithRelations
     */
    del?: number;
    /**
     * 
     * @type {number}
     * @memberof TlaTimelineItemWithRelations
     */
    time?: number;
}
/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserInfo
     */
    role: string;
}
/**
 * 
 * @export
 * @interface UserTrack
 */
export interface UserTrack {
    /**
     * 
     * @type {string}
     * @memberof UserTrack
     */
    user: string;
    /**
     * 
     * @type {Array<UserTrackInfo>}
     * @memberof UserTrack
     */
    timeline: Array<UserTrackInfo>;
}
/**
 * 
 * @export
 * @interface UserTrackAcrion
 */
export interface UserTrackAcrion {
    /**
     * 
     * @type {string}
     * @memberof UserTrackAcrion
     */
    from: string;
    /**
     * 
     * @type {string}
     * @memberof UserTrackAcrion
     */
    to: string;
}
/**
 * 
 * @export
 * @interface UserTrackInfo
 */
export interface UserTrackInfo {
    /**
     * 
     * @type {number}
     * @memberof UserTrackInfo
     */
    time: number;
    /**
     * 
     * @type {UserTrackAcrion}
     * @memberof UserTrackInfo
     */
    action: UserTrackAcrion;
}
/**
 * 
 * @export
 * @interface WorkspaceSession
 */
export interface WorkspaceSession {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceSession
     */
    token: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceSession
     */
    containerID?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceSession
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceSession
     */
    projectArchive?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceSession
     */
    enableTrack: boolean;
}
/**
 * 
 * @export
 * @interface WorkspaceSessionFields
 */
export interface WorkspaceSessionFields {
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceSessionFields
     */
    token?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceSessionFields
     */
    containerID?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceSessionFields
     */
    address?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceSessionFields
     */
    projectArchive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceSessionFields
     */
    enableTrack?: boolean;
}
/**
 * 
 * @export
 * @interface WorkspaceSessionFilter
 */
export interface WorkspaceSessionFilter {
    /**
     * 
     * @type {number}
     * @memberof WorkspaceSessionFilter
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceSessionFilter
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof WorkspaceSessionFilter
     */
    skip?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof WorkspaceSessionFilter
     */
    order?: Array<string>;
    /**
     * 
     * @type {WorkspaceSessionFields}
     * @memberof WorkspaceSessionFilter
     */
    fields?: WorkspaceSessionFields;
}
/**
 * (tsType: WorkspaceSessionWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface WorkspaceSessionWithRelations
 */
export interface WorkspaceSessionWithRelations {
    /**
     * 
     * @type {string}
     * @memberof WorkspaceSessionWithRelations
     */
    token: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceSessionWithRelations
     */
    containerID?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceSessionWithRelations
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof WorkspaceSessionWithRelations
     */
    projectArchive?: string;
    /**
     * 
     * @type {boolean}
     * @memberof WorkspaceSessionWithRelations
     */
    enableTrack: boolean;
}

/**
 * AnswerControllerApi - axios parameter creator
 * @export
 */
export const AnswerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerCount(where?: { [key: string]: object; }, options: any = {}): RequestArgs {
            const localVarPath = `/answers/count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewAnswer} [newAnswer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerCreate(newAnswer?: NewAnswer, options: any = {}): RequestArgs {
            const localVarPath = `/answers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof newAnswer !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newAnswer !== undefined ? newAnswer : {}) : (newAnswer || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerDeleteById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling answerControllerDeleteById.');
            }
            const localVarPath = `/answers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AnswerFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerFind(filter?: AnswerFilter1, options: any = {}): RequestArgs {
            const localVarPath = `/answers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AnswerFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerFindById(id: number, filter?: AnswerFilter, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling answerControllerFindById.');
            }
            const localVarPath = `/answers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Answer} [answer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerReplaceById(id: number, answer?: Answer, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling answerControllerReplaceById.');
            }
            const localVarPath = `/answers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof answer !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(answer !== undefined ? answer : {}) : (answer || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {AnswerPartial} [answerPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerUpdateAll(where?: { [key: string]: object; }, answerPartial?: AnswerPartial, options: any = {}): RequestArgs {
            const localVarPath = `/answers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof answerPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(answerPartial !== undefined ? answerPartial : {}) : (answerPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AnswerPartial} [answerPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerUpdateById(id: number, answerPartial?: AnswerPartial, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling answerControllerUpdateById.');
            }
            const localVarPath = `/answers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof answerPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(answerPartial !== undefined ? answerPartial : {}) : (answerPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnswerControllerApi - functional programming interface
 * @export
 */
export const AnswerControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerCount(where?: { [key: string]: object; }, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerCount(where, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NewAnswer} [newAnswer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerCreate(newAnswer?: NewAnswer, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Answer> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerCreate(newAnswer, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerDeleteById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerDeleteById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {AnswerFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerFind(filter?: AnswerFilter1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnswerWithRelations>> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerFind(filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AnswerFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerFindById(id: number, filter?: AnswerFilter, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnswerWithRelations> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerFindById(id, filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Answer} [answer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerReplaceById(id: number, answer?: Answer, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerReplaceById(id, answer, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {AnswerPartial} [answerPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerUpdateAll(where?: { [key: string]: object; }, answerPartial?: AnswerPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerUpdateAll(where, answerPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AnswerPartial} [answerPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerUpdateById(id: number, answerPartial?: AnswerPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerUpdateById(id, answerPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AnswerControllerApi - factory interface
 * @export
 */
export const AnswerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return AnswerControllerApiFp(configuration).answerControllerCount(where, options)(axios, basePath);
        },
        /**
         * 
         * @param {NewAnswer} [newAnswer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerCreate(newAnswer?: NewAnswer, options?: any): AxiosPromise<Answer> {
            return AnswerControllerApiFp(configuration).answerControllerCreate(newAnswer, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerDeleteById(id: number, options?: any): AxiosPromise<void> {
            return AnswerControllerApiFp(configuration).answerControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {AnswerFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerFind(filter?: AnswerFilter1, options?: any): AxiosPromise<Array<AnswerWithRelations>> {
            return AnswerControllerApiFp(configuration).answerControllerFind(filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {AnswerFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerFindById(id: number, filter?: AnswerFilter, options?: any): AxiosPromise<AnswerWithRelations> {
            return AnswerControllerApiFp(configuration).answerControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Answer} [answer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerReplaceById(id: number, answer?: Answer, options?: any): AxiosPromise<void> {
            return AnswerControllerApiFp(configuration).answerControllerReplaceById(id, answer, options)(axios, basePath);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {AnswerPartial} [answerPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerUpdateAll(where?: { [key: string]: object; }, answerPartial?: AnswerPartial, options?: any): AxiosPromise<LoopbackCount> {
            return AnswerControllerApiFp(configuration).answerControllerUpdateAll(where, answerPartial, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {AnswerPartial} [answerPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerUpdateById(id: number, answerPartial?: AnswerPartial, options?: any): AxiosPromise<void> {
            return AnswerControllerApiFp(configuration).answerControllerUpdateById(id, answerPartial, options)(axios, basePath);
        },
    };
};

/**
 * AnswerControllerApi - interface
 * @export
 * @interface AnswerControllerApi
 */
export interface AnswerControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {NewAnswer} [newAnswer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerCreate(newAnswer?: NewAnswer, options?: any): AxiosPromise<Answer>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerDeleteById(id: number, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {AnswerFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerFind(filter?: AnswerFilter1, options?: any): AxiosPromise<Array<AnswerWithRelations>>;

    /**
     * 
     * @param {number} id 
     * @param {AnswerFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerFindById(id: number, filter?: AnswerFilter, options?: any): AxiosPromise<AnswerWithRelations>;

    /**
     * 
     * @param {number} id 
     * @param {Answer} [answer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerReplaceById(id: number, answer?: Answer, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {AnswerPartial} [answerPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerUpdateAll(where?: { [key: string]: object; }, answerPartial?: AnswerPartial, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {number} id 
     * @param {AnswerPartial} [answerPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerUpdateById(id: number, answerPartial?: AnswerPartial, options?: any): AxiosPromise<void>;

}

/**
 * AnswerControllerApi - object-oriented interface
 * @export
 * @class AnswerControllerApi
 * @extends {BaseAPI}
 */
export class AnswerControllerApi extends BaseAPI implements AnswerControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerCount(where?: { [key: string]: object; }, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerCount(where, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {NewAnswer} [newAnswer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerCreate(newAnswer?: NewAnswer, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerCreate(newAnswer, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerDeleteById(id: number, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerDeleteById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {AnswerFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerFind(filter?: AnswerFilter1, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerFind(filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {AnswerFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerFindById(id: number, filter?: AnswerFilter, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerFindById(id, filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {Answer} [answer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerReplaceById(id: number, answer?: Answer, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerReplaceById(id, answer, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {AnswerPartial} [answerPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerUpdateAll(where?: { [key: string]: object; }, answerPartial?: AnswerPartial, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerUpdateAll(where, answerPartial, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {AnswerPartial} [answerPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerUpdateById(id: number, answerPartial?: AnswerPartial, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerUpdateById(id, answerPartial, options)(this.axios, this.basePath);
    }

}


/**
 * FileUdControllerApi - axios parameter creator
 * @export
 */
export const FileUdControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUdControllerDownloadFile(filename: string, options: any = {}): RequestArgs {
            // verify required parameter 'filename' is not null or undefined
            if (filename === null || filename === undefined) {
                throw new RequiredError('filename','Required parameter filename was null or undefined when calling fileUdControllerDownloadFile.');
            }
            const localVarPath = `/files/dl/{filename}`
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUdControllerFileUpload(file?: any, options: any = {}): RequestArgs {
            const localVarPath = `/files/u`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUdControllerListFiles(options: any = {}): RequestArgs {
            const localVarPath = `/files/ls`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FileUdControllerApi - functional programming interface
 * @export
 */
export const FileUdControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUdControllerDownloadFile(filename: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<any> {
            const localVarAxiosArgs = FileUdControllerApiAxiosParamCreator(configuration).fileUdControllerDownloadFile(filename, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUdControllerFileUpload(file?: any, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = FileUdControllerApiAxiosParamCreator(configuration).fileUdControllerFileUpload(file, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUdControllerListFiles(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>> {
            const localVarAxiosArgs = FileUdControllerApiAxiosParamCreator(configuration).fileUdControllerListFiles(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FileUdControllerApi - factory interface
 * @export
 */
export const FileUdControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUdControllerDownloadFile(filename: string, options?: any): AxiosPromise<any> {
            return FileUdControllerApiFp(configuration).fileUdControllerDownloadFile(filename, options)(axios, basePath);
        },
        /**
         * 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUdControllerFileUpload(file?: any, options?: any): AxiosPromise<object> {
            return FileUdControllerApiFp(configuration).fileUdControllerFileUpload(file, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileUdControllerListFiles(options?: any): AxiosPromise<Array<string>> {
            return FileUdControllerApiFp(configuration).fileUdControllerListFiles(options)(axios, basePath);
        },
    };
};

/**
 * FileUdControllerApi - interface
 * @export
 * @interface FileUdControllerApi
 */
export interface FileUdControllerApiInterface {
    /**
     * 
     * @param {string} filename 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUdControllerApiInterface
     */
    fileUdControllerDownloadFile(filename: string, options?: any): AxiosPromise<any>;

    /**
     * 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUdControllerApiInterface
     */
    fileUdControllerFileUpload(file?: any, options?: any): AxiosPromise<object>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUdControllerApiInterface
     */
    fileUdControllerListFiles(options?: any): AxiosPromise<Array<string>>;

}

/**
 * FileUdControllerApi - object-oriented interface
 * @export
 * @class FileUdControllerApi
 * @extends {BaseAPI}
 */
export class FileUdControllerApi extends BaseAPI implements FileUdControllerApiInterface {
    /**
     * 
     * @param {string} filename 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUdControllerApi
     */
    public fileUdControllerDownloadFile(filename: string, options?: any) {
        return FileUdControllerApiFp(this.configuration).fileUdControllerDownloadFile(filename, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUdControllerApi
     */
    public fileUdControllerFileUpload(file?: any, options?: any) {
        return FileUdControllerApiFp(this.configuration).fileUdControllerFileUpload(file, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FileUdControllerApi
     */
    public fileUdControllerListFiles(options?: any) {
        return FileUdControllerApiFp(this.configuration).fileUdControllerListFiles(options)(this.axios, this.basePath);
    }

}


/**
 * PingControllerApi - axios parameter creator
 * @export
 */
export const PingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingControllerPing(options: any = {}): RequestArgs {
            const localVarPath = `/ping`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PingControllerApi - functional programming interface
 * @export
 */
export const PingControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingControllerPing(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PingResponse> {
            const localVarAxiosArgs = PingControllerApiAxiosParamCreator(configuration).pingControllerPing(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PingControllerApi - factory interface
 * @export
 */
export const PingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingControllerPing(options?: any): AxiosPromise<PingResponse> {
            return PingControllerApiFp(configuration).pingControllerPing(options)(axios, basePath);
        },
    };
};

/**
 * PingControllerApi - interface
 * @export
 * @interface PingControllerApi
 */
export interface PingControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingControllerApiInterface
     */
    pingControllerPing(options?: any): AxiosPromise<PingResponse>;

}

/**
 * PingControllerApi - object-oriented interface
 * @export
 * @class PingControllerApi
 * @extends {BaseAPI}
 */
export class PingControllerApi extends BaseAPI implements PingControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingControllerApi
     */
    public pingControllerPing(options?: any) {
        return PingControllerApiFp(this.configuration).pingControllerPing(options)(this.axios, this.basePath);
    }

}


/**
 * QuestionControllerApi - axios parameter creator
 * @export
 */
export const QuestionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerCount(where?: { [key: string]: object; }, options: any = {}): RequestArgs {
            const localVarPath = `/questions/count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewQuestion} [newQuestion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerCreate(newQuestion?: NewQuestion, options: any = {}): RequestArgs {
            const localVarPath = `/questions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof newQuestion !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newQuestion !== undefined ? newQuestion : {}) : (newQuestion || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerDeleteById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling questionControllerDeleteById.');
            }
            const localVarPath = `/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QuestionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerFind(filter?: QuestionFilter1, options: any = {}): RequestArgs {
            const localVarPath = `/questions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {QuestionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerFindById(id: number, filter?: QuestionFilter, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling questionControllerFindById.');
            }
            const localVarPath = `/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Question} [question] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerReplaceById(id: number, question?: Question, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling questionControllerReplaceById.');
            }
            const localVarPath = `/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof question !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(question !== undefined ? question : {}) : (question || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {QuestionPartial} [questionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerUpdateAll(where?: { [key: string]: object; }, questionPartial?: QuestionPartial, options: any = {}): RequestArgs {
            const localVarPath = `/questions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof questionPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(questionPartial !== undefined ? questionPartial : {}) : (questionPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {QuestionPartial} [questionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerUpdateById(id: number, questionPartial?: QuestionPartial, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling questionControllerUpdateById.');
            }
            const localVarPath = `/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof questionPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(questionPartial !== undefined ? questionPartial : {}) : (questionPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionControllerApi - functional programming interface
 * @export
 */
export const QuestionControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerCount(where?: { [key: string]: object; }, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerCount(where, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NewQuestion} [newQuestion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerCreate(newQuestion?: NewQuestion, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Question> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerCreate(newQuestion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerDeleteById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerDeleteById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {QuestionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerFind(filter?: QuestionFilter1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuestionWithRelations>> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerFind(filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {QuestionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerFindById(id: number, filter?: QuestionFilter, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionWithRelations> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerFindById(id, filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Question} [question] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerReplaceById(id: number, question?: Question, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerReplaceById(id, question, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {QuestionPartial} [questionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerUpdateAll(where?: { [key: string]: object; }, questionPartial?: QuestionPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerUpdateAll(where, questionPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {QuestionPartial} [questionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerUpdateById(id: number, questionPartial?: QuestionPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerUpdateById(id, questionPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * QuestionControllerApi - factory interface
 * @export
 */
export const QuestionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return QuestionControllerApiFp(configuration).questionControllerCount(where, options)(axios, basePath);
        },
        /**
         * 
         * @param {NewQuestion} [newQuestion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerCreate(newQuestion?: NewQuestion, options?: any): AxiosPromise<Question> {
            return QuestionControllerApiFp(configuration).questionControllerCreate(newQuestion, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerDeleteById(id: number, options?: any): AxiosPromise<void> {
            return QuestionControllerApiFp(configuration).questionControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {QuestionFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerFind(filter?: QuestionFilter1, options?: any): AxiosPromise<Array<QuestionWithRelations>> {
            return QuestionControllerApiFp(configuration).questionControllerFind(filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {QuestionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerFindById(id: number, filter?: QuestionFilter, options?: any): AxiosPromise<QuestionWithRelations> {
            return QuestionControllerApiFp(configuration).questionControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Question} [question] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerReplaceById(id: number, question?: Question, options?: any): AxiosPromise<void> {
            return QuestionControllerApiFp(configuration).questionControllerReplaceById(id, question, options)(axios, basePath);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {QuestionPartial} [questionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerUpdateAll(where?: { [key: string]: object; }, questionPartial?: QuestionPartial, options?: any): AxiosPromise<LoopbackCount> {
            return QuestionControllerApiFp(configuration).questionControllerUpdateAll(where, questionPartial, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {QuestionPartial} [questionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerUpdateById(id: number, questionPartial?: QuestionPartial, options?: any): AxiosPromise<void> {
            return QuestionControllerApiFp(configuration).questionControllerUpdateById(id, questionPartial, options)(axios, basePath);
        },
    };
};

/**
 * QuestionControllerApi - interface
 * @export
 * @interface QuestionControllerApi
 */
export interface QuestionControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {NewQuestion} [newQuestion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerCreate(newQuestion?: NewQuestion, options?: any): AxiosPromise<Question>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerDeleteById(id: number, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {QuestionFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerFind(filter?: QuestionFilter1, options?: any): AxiosPromise<Array<QuestionWithRelations>>;

    /**
     * 
     * @param {number} id 
     * @param {QuestionFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerFindById(id: number, filter?: QuestionFilter, options?: any): AxiosPromise<QuestionWithRelations>;

    /**
     * 
     * @param {number} id 
     * @param {Question} [question] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerReplaceById(id: number, question?: Question, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {QuestionPartial} [questionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerUpdateAll(where?: { [key: string]: object; }, questionPartial?: QuestionPartial, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {number} id 
     * @param {QuestionPartial} [questionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerUpdateById(id: number, questionPartial?: QuestionPartial, options?: any): AxiosPromise<void>;

}

/**
 * QuestionControllerApi - object-oriented interface
 * @export
 * @class QuestionControllerApi
 * @extends {BaseAPI}
 */
export class QuestionControllerApi extends BaseAPI implements QuestionControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerCount(where?: { [key: string]: object; }, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerCount(where, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {NewQuestion} [newQuestion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerCreate(newQuestion?: NewQuestion, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerCreate(newQuestion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerDeleteById(id: number, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerDeleteById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {QuestionFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerFind(filter?: QuestionFilter1, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerFind(filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {QuestionFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerFindById(id: number, filter?: QuestionFilter, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerFindById(id, filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {Question} [question] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerReplaceById(id: number, question?: Question, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerReplaceById(id, question, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {QuestionPartial} [questionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerUpdateAll(where?: { [key: string]: object; }, questionPartial?: QuestionPartial, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerUpdateAll(where, questionPartial, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {QuestionPartial} [questionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerUpdateById(id: number, questionPartial?: QuestionPartial, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerUpdateById(id, questionPartial, options)(this.axios, this.basePath);
    }

}


/**
 * RecordControllerApi - axios parameter creator
 * @export
 */
export const RecordControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerCount(where?: { [key: string]: object; }, options: any = {}): RequestArgs {
            const localVarPath = `/records/count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewRecord} [newRecord] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerCreate(newRecord?: NewRecord, options: any = {}): RequestArgs {
            const localVarPath = `/records`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof newRecord !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newRecord !== undefined ? newRecord : {}) : (newRecord || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerDeleteById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling recordControllerDeleteById.');
            }
            const localVarPath = `/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RecordFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerFind(filter?: RecordFilter1, options: any = {}): RequestArgs {
            const localVarPath = `/records`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RecordFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerFindById(id: number, filter?: RecordFilter, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling recordControllerFindById.');
            }
            const localVarPath = `/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Record} [record] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerReplaceById(id: number, record?: Record, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling recordControllerReplaceById.');
            }
            const localVarPath = `/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof record !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(record !== undefined ? record : {}) : (record || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RecordPartial} [recordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerUpdateAll(where?: { [key: string]: object; }, recordPartial?: RecordPartial, options: any = {}): RequestArgs {
            const localVarPath = `/records`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof recordPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(recordPartial !== undefined ? recordPartial : {}) : (recordPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RecordPartial} [recordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerUpdateById(id: number, recordPartial?: RecordPartial, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling recordControllerUpdateById.');
            }
            const localVarPath = `/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof recordPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(recordPartial !== undefined ? recordPartial : {}) : (recordPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecordControllerApi - functional programming interface
 * @export
 */
export const RecordControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerCount(where?: { [key: string]: object; }, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerCount(where, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NewRecord} [newRecord] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerCreate(newRecord?: NewRecord, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Record> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerCreate(newRecord, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerDeleteById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerDeleteById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {RecordFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerFind(filter?: RecordFilter1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecordWithRelations>> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerFind(filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RecordFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerFindById(id: number, filter?: RecordFilter, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordWithRelations> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerFindById(id, filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Record} [record] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerReplaceById(id: number, record?: Record, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerReplaceById(id, record, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RecordPartial} [recordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerUpdateAll(where?: { [key: string]: object; }, recordPartial?: RecordPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerUpdateAll(where, recordPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RecordPartial} [recordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerUpdateById(id: number, recordPartial?: RecordPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerUpdateById(id, recordPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RecordControllerApi - factory interface
 * @export
 */
export const RecordControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return RecordControllerApiFp(configuration).recordControllerCount(where, options)(axios, basePath);
        },
        /**
         * 
         * @param {NewRecord} [newRecord] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerCreate(newRecord?: NewRecord, options?: any): AxiosPromise<Record> {
            return RecordControllerApiFp(configuration).recordControllerCreate(newRecord, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerDeleteById(id: number, options?: any): AxiosPromise<void> {
            return RecordControllerApiFp(configuration).recordControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {RecordFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerFind(filter?: RecordFilter1, options?: any): AxiosPromise<Array<RecordWithRelations>> {
            return RecordControllerApiFp(configuration).recordControllerFind(filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {RecordFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerFindById(id: number, filter?: RecordFilter, options?: any): AxiosPromise<RecordWithRelations> {
            return RecordControllerApiFp(configuration).recordControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Record} [record] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerReplaceById(id: number, record?: Record, options?: any): AxiosPromise<void> {
            return RecordControllerApiFp(configuration).recordControllerReplaceById(id, record, options)(axios, basePath);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RecordPartial} [recordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerUpdateAll(where?: { [key: string]: object; }, recordPartial?: RecordPartial, options?: any): AxiosPromise<LoopbackCount> {
            return RecordControllerApiFp(configuration).recordControllerUpdateAll(where, recordPartial, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {RecordPartial} [recordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerUpdateById(id: number, recordPartial?: RecordPartial, options?: any): AxiosPromise<void> {
            return RecordControllerApiFp(configuration).recordControllerUpdateById(id, recordPartial, options)(axios, basePath);
        },
    };
};

/**
 * RecordControllerApi - interface
 * @export
 * @interface RecordControllerApi
 */
export interface RecordControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {NewRecord} [newRecord] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerCreate(newRecord?: NewRecord, options?: any): AxiosPromise<Record>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerDeleteById(id: number, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {RecordFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerFind(filter?: RecordFilter1, options?: any): AxiosPromise<Array<RecordWithRelations>>;

    /**
     * 
     * @param {number} id 
     * @param {RecordFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerFindById(id: number, filter?: RecordFilter, options?: any): AxiosPromise<RecordWithRelations>;

    /**
     * 
     * @param {number} id 
     * @param {Record} [record] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerReplaceById(id: number, record?: Record, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {RecordPartial} [recordPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerUpdateAll(where?: { [key: string]: object; }, recordPartial?: RecordPartial, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {number} id 
     * @param {RecordPartial} [recordPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerUpdateById(id: number, recordPartial?: RecordPartial, options?: any): AxiosPromise<void>;

}

/**
 * RecordControllerApi - object-oriented interface
 * @export
 * @class RecordControllerApi
 * @extends {BaseAPI}
 */
export class RecordControllerApi extends BaseAPI implements RecordControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerCount(where?: { [key: string]: object; }, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerCount(where, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {NewRecord} [newRecord] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerCreate(newRecord?: NewRecord, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerCreate(newRecord, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerDeleteById(id: number, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerDeleteById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {RecordFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerFind(filter?: RecordFilter1, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerFind(filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {RecordFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerFindById(id: number, filter?: RecordFilter, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerFindById(id, filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {Record} [record] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerReplaceById(id: number, record?: Record, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerReplaceById(id, record, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {RecordPartial} [recordPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerUpdateAll(where?: { [key: string]: object; }, recordPartial?: RecordPartial, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerUpdateAll(where, recordPartial, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {RecordPartial} [recordPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerUpdateById(id: number, recordPartial?: RecordPartial, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerUpdateById(id, recordPartial, options)(this.axios, this.basePath);
    }

}


/**
 * TemplateControllerApi - axios parameter creator
 * @export
 */
export const TemplateControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerCount(where?: { [key: string]: object; }, options: any = {}): RequestArgs {
            const localVarPath = `/templates/count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTemplate} [newTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerCreate(newTemplate?: NewTemplate, options: any = {}): RequestArgs {
            const localVarPath = `/templates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof newTemplate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newTemplate !== undefined ? newTemplate : {}) : (newTemplate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerDeleteById(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling templateControllerDeleteById.');
            }
            const localVarPath = `/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TemplateFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerFind(filter?: TemplateFilter1, options: any = {}): RequestArgs {
            const localVarPath = `/templates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {TemplateFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerFindById(id: string, filter?: TemplateFilter, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling templateControllerFindById.');
            }
            const localVarPath = `/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Template} [template] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerReplaceById(id: string, template?: Template, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling templateControllerReplaceById.');
            }
            const localVarPath = `/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof template !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(template !== undefined ? template : {}) : (template || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TemplatePartial} [templatePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerUpdateAll(where?: { [key: string]: object; }, templatePartial?: TemplatePartial, options: any = {}): RequestArgs {
            const localVarPath = `/templates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof templatePartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(templatePartial !== undefined ? templatePartial : {}) : (templatePartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {TemplatePartial} [templatePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerUpdateById(id: string, templatePartial?: TemplatePartial, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling templateControllerUpdateById.');
            }
            const localVarPath = `/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof templatePartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(templatePartial !== undefined ? templatePartial : {}) : (templatePartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplateControllerApi - functional programming interface
 * @export
 */
export const TemplateControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerCount(where?: { [key: string]: object; }, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerCount(where, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NewTemplate} [newTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerCreate(newTemplate?: NewTemplate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Template> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerCreate(newTemplate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerDeleteById(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerDeleteById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {TemplateFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerFind(filter?: TemplateFilter1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TemplateWithRelations>> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerFind(filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {TemplateFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerFindById(id: string, filter?: TemplateFilter, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateWithRelations> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerFindById(id, filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Template} [template] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerReplaceById(id: string, template?: Template, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerReplaceById(id, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TemplatePartial} [templatePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerUpdateAll(where?: { [key: string]: object; }, templatePartial?: TemplatePartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerUpdateAll(where, templatePartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {TemplatePartial} [templatePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerUpdateById(id: string, templatePartial?: TemplatePartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerUpdateById(id, templatePartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TemplateControllerApi - factory interface
 * @export
 */
export const TemplateControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return TemplateControllerApiFp(configuration).templateControllerCount(where, options)(axios, basePath);
        },
        /**
         * 
         * @param {NewTemplate} [newTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerCreate(newTemplate?: NewTemplate, options?: any): AxiosPromise<Template> {
            return TemplateControllerApiFp(configuration).templateControllerCreate(newTemplate, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerDeleteById(id: string, options?: any): AxiosPromise<void> {
            return TemplateControllerApiFp(configuration).templateControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {TemplateFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerFind(filter?: TemplateFilter1, options?: any): AxiosPromise<Array<TemplateWithRelations>> {
            return TemplateControllerApiFp(configuration).templateControllerFind(filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {TemplateFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerFindById(id: string, filter?: TemplateFilter, options?: any): AxiosPromise<TemplateWithRelations> {
            return TemplateControllerApiFp(configuration).templateControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {Template} [template] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerReplaceById(id: string, template?: Template, options?: any): AxiosPromise<void> {
            return TemplateControllerApiFp(configuration).templateControllerReplaceById(id, template, options)(axios, basePath);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TemplatePartial} [templatePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerUpdateAll(where?: { [key: string]: object; }, templatePartial?: TemplatePartial, options?: any): AxiosPromise<LoopbackCount> {
            return TemplateControllerApiFp(configuration).templateControllerUpdateAll(where, templatePartial, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {TemplatePartial} [templatePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerUpdateById(id: string, templatePartial?: TemplatePartial, options?: any): AxiosPromise<void> {
            return TemplateControllerApiFp(configuration).templateControllerUpdateById(id, templatePartial, options)(axios, basePath);
        },
    };
};

/**
 * TemplateControllerApi - interface
 * @export
 * @interface TemplateControllerApi
 */
export interface TemplateControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {NewTemplate} [newTemplate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerCreate(newTemplate?: NewTemplate, options?: any): AxiosPromise<Template>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerDeleteById(id: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {TemplateFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerFind(filter?: TemplateFilter1, options?: any): AxiosPromise<Array<TemplateWithRelations>>;

    /**
     * 
     * @param {string} id 
     * @param {TemplateFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerFindById(id: string, filter?: TemplateFilter, options?: any): AxiosPromise<TemplateWithRelations>;

    /**
     * 
     * @param {string} id 
     * @param {Template} [template] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerReplaceById(id: string, template?: Template, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TemplatePartial} [templatePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerUpdateAll(where?: { [key: string]: object; }, templatePartial?: TemplatePartial, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {string} id 
     * @param {TemplatePartial} [templatePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerUpdateById(id: string, templatePartial?: TemplatePartial, options?: any): AxiosPromise<void>;

}

/**
 * TemplateControllerApi - object-oriented interface
 * @export
 * @class TemplateControllerApi
 * @extends {BaseAPI}
 */
export class TemplateControllerApi extends BaseAPI implements TemplateControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerCount(where?: { [key: string]: object; }, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerCount(where, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {NewTemplate} [newTemplate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerCreate(newTemplate?: NewTemplate, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerCreate(newTemplate, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerDeleteById(id: string, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerDeleteById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {TemplateFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerFind(filter?: TemplateFilter1, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerFind(filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {TemplateFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerFindById(id: string, filter?: TemplateFilter, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerFindById(id, filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {Template} [template] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerReplaceById(id: string, template?: Template, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerReplaceById(id, template, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TemplatePartial} [templatePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerUpdateAll(where?: { [key: string]: object; }, templatePartial?: TemplatePartial, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerUpdateAll(where, templatePartial, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {TemplatePartial} [templatePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerUpdateById(id: string, templatePartial?: TemplatePartial, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerUpdateById(id, templatePartial, options)(this.axios, this.basePath);
    }

}


/**
 * TlAnalysisControllerApi - axios parameter creator
 * @export
 */
export const TlAnalysisControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerCount(where?: { [key: string]: object; }, options: any = {}): RequestArgs {
            const localVarPath = `/timeline-analyses/count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTimelineAnalysis} [newTimelineAnalysis] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerCreate(newTimelineAnalysis?: NewTimelineAnalysis, options: any = {}): RequestArgs {
            const localVarPath = `/timeline-analyses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof newTimelineAnalysis !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newTimelineAnalysis !== undefined ? newTimelineAnalysis : {}) : (newTimelineAnalysis || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerDeleteById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tlAnalysisControllerDeleteById.');
            }
            const localVarPath = `/timeline-analyses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TimelineAnalysisFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerFind(filter?: TimelineAnalysisFilter1, options: any = {}): RequestArgs {
            const localVarPath = `/timeline-analyses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TimelineAnalysisFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerFindById(id: number, filter?: TimelineAnalysisFilter, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tlAnalysisControllerFindById.');
            }
            const localVarPath = `/timeline-analyses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TimelineAnalysis} [timelineAnalysis] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerReplaceById(id: number, timelineAnalysis?: TimelineAnalysis, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tlAnalysisControllerReplaceById.');
            }
            const localVarPath = `/timeline-analyses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof timelineAnalysis !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(timelineAnalysis !== undefined ? timelineAnalysis : {}) : (timelineAnalysis || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TimelineAnalysisPartial} [timelineAnalysisPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerUpdateAll(where?: { [key: string]: object; }, timelineAnalysisPartial?: TimelineAnalysisPartial, options: any = {}): RequestArgs {
            const localVarPath = `/timeline-analyses`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof timelineAnalysisPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(timelineAnalysisPartial !== undefined ? timelineAnalysisPartial : {}) : (timelineAnalysisPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TimelineAnalysisPartial} [timelineAnalysisPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerUpdateById(id: number, timelineAnalysisPartial?: TimelineAnalysisPartial, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tlAnalysisControllerUpdateById.');
            }
            const localVarPath = `/timeline-analyses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof timelineAnalysisPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(timelineAnalysisPartial !== undefined ? timelineAnalysisPartial : {}) : (timelineAnalysisPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TlAnalysisControllerApi - functional programming interface
 * @export
 */
export const TlAnalysisControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerCount(where?: { [key: string]: object; }, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = TlAnalysisControllerApiAxiosParamCreator(configuration).tlAnalysisControllerCount(where, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NewTimelineAnalysis} [newTimelineAnalysis] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerCreate(newTimelineAnalysis?: NewTimelineAnalysis, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimelineAnalysis> {
            const localVarAxiosArgs = TlAnalysisControllerApiAxiosParamCreator(configuration).tlAnalysisControllerCreate(newTimelineAnalysis, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerDeleteById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TlAnalysisControllerApiAxiosParamCreator(configuration).tlAnalysisControllerDeleteById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {TimelineAnalysisFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerFind(filter?: TimelineAnalysisFilter1, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TimelineAnalysisWithRelations>> {
            const localVarAxiosArgs = TlAnalysisControllerApiAxiosParamCreator(configuration).tlAnalysisControllerFind(filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TimelineAnalysisFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerFindById(id: number, filter?: TimelineAnalysisFilter, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimelineAnalysisWithRelations> {
            const localVarAxiosArgs = TlAnalysisControllerApiAxiosParamCreator(configuration).tlAnalysisControllerFindById(id, filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TimelineAnalysis} [timelineAnalysis] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerReplaceById(id: number, timelineAnalysis?: TimelineAnalysis, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TlAnalysisControllerApiAxiosParamCreator(configuration).tlAnalysisControllerReplaceById(id, timelineAnalysis, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TimelineAnalysisPartial} [timelineAnalysisPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerUpdateAll(where?: { [key: string]: object; }, timelineAnalysisPartial?: TimelineAnalysisPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = TlAnalysisControllerApiAxiosParamCreator(configuration).tlAnalysisControllerUpdateAll(where, timelineAnalysisPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {TimelineAnalysisPartial} [timelineAnalysisPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerUpdateById(id: number, timelineAnalysisPartial?: TimelineAnalysisPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TlAnalysisControllerApiAxiosParamCreator(configuration).tlAnalysisControllerUpdateById(id, timelineAnalysisPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TlAnalysisControllerApi - factory interface
 * @export
 */
export const TlAnalysisControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return TlAnalysisControllerApiFp(configuration).tlAnalysisControllerCount(where, options)(axios, basePath);
        },
        /**
         * 
         * @param {NewTimelineAnalysis} [newTimelineAnalysis] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerCreate(newTimelineAnalysis?: NewTimelineAnalysis, options?: any): AxiosPromise<TimelineAnalysis> {
            return TlAnalysisControllerApiFp(configuration).tlAnalysisControllerCreate(newTimelineAnalysis, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerDeleteById(id: number, options?: any): AxiosPromise<void> {
            return TlAnalysisControllerApiFp(configuration).tlAnalysisControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {TimelineAnalysisFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerFind(filter?: TimelineAnalysisFilter1, options?: any): AxiosPromise<Array<TimelineAnalysisWithRelations>> {
            return TlAnalysisControllerApiFp(configuration).tlAnalysisControllerFind(filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TimelineAnalysisFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerFindById(id: number, filter?: TimelineAnalysisFilter, options?: any): AxiosPromise<TimelineAnalysisWithRelations> {
            return TlAnalysisControllerApiFp(configuration).tlAnalysisControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TimelineAnalysis} [timelineAnalysis] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerReplaceById(id: number, timelineAnalysis?: TimelineAnalysis, options?: any): AxiosPromise<void> {
            return TlAnalysisControllerApiFp(configuration).tlAnalysisControllerReplaceById(id, timelineAnalysis, options)(axios, basePath);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TimelineAnalysisPartial} [timelineAnalysisPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerUpdateAll(where?: { [key: string]: object; }, timelineAnalysisPartial?: TimelineAnalysisPartial, options?: any): AxiosPromise<LoopbackCount> {
            return TlAnalysisControllerApiFp(configuration).tlAnalysisControllerUpdateAll(where, timelineAnalysisPartial, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {TimelineAnalysisPartial} [timelineAnalysisPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tlAnalysisControllerUpdateById(id: number, timelineAnalysisPartial?: TimelineAnalysisPartial, options?: any): AxiosPromise<void> {
            return TlAnalysisControllerApiFp(configuration).tlAnalysisControllerUpdateById(id, timelineAnalysisPartial, options)(axios, basePath);
        },
    };
};

/**
 * TlAnalysisControllerApi - interface
 * @export
 * @interface TlAnalysisControllerApi
 */
export interface TlAnalysisControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApiInterface
     */
    tlAnalysisControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {NewTimelineAnalysis} [newTimelineAnalysis] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApiInterface
     */
    tlAnalysisControllerCreate(newTimelineAnalysis?: NewTimelineAnalysis, options?: any): AxiosPromise<TimelineAnalysis>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApiInterface
     */
    tlAnalysisControllerDeleteById(id: number, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {TimelineAnalysisFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApiInterface
     */
    tlAnalysisControllerFind(filter?: TimelineAnalysisFilter1, options?: any): AxiosPromise<Array<TimelineAnalysisWithRelations>>;

    /**
     * 
     * @param {number} id 
     * @param {TimelineAnalysisFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApiInterface
     */
    tlAnalysisControllerFindById(id: number, filter?: TimelineAnalysisFilter, options?: any): AxiosPromise<TimelineAnalysisWithRelations>;

    /**
     * 
     * @param {number} id 
     * @param {TimelineAnalysis} [timelineAnalysis] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApiInterface
     */
    tlAnalysisControllerReplaceById(id: number, timelineAnalysis?: TimelineAnalysis, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TimelineAnalysisPartial} [timelineAnalysisPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApiInterface
     */
    tlAnalysisControllerUpdateAll(where?: { [key: string]: object; }, timelineAnalysisPartial?: TimelineAnalysisPartial, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {number} id 
     * @param {TimelineAnalysisPartial} [timelineAnalysisPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApiInterface
     */
    tlAnalysisControllerUpdateById(id: number, timelineAnalysisPartial?: TimelineAnalysisPartial, options?: any): AxiosPromise<void>;

}

/**
 * TlAnalysisControllerApi - object-oriented interface
 * @export
 * @class TlAnalysisControllerApi
 * @extends {BaseAPI}
 */
export class TlAnalysisControllerApi extends BaseAPI implements TlAnalysisControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApi
     */
    public tlAnalysisControllerCount(where?: { [key: string]: object; }, options?: any) {
        return TlAnalysisControllerApiFp(this.configuration).tlAnalysisControllerCount(where, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {NewTimelineAnalysis} [newTimelineAnalysis] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApi
     */
    public tlAnalysisControllerCreate(newTimelineAnalysis?: NewTimelineAnalysis, options?: any) {
        return TlAnalysisControllerApiFp(this.configuration).tlAnalysisControllerCreate(newTimelineAnalysis, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApi
     */
    public tlAnalysisControllerDeleteById(id: number, options?: any) {
        return TlAnalysisControllerApiFp(this.configuration).tlAnalysisControllerDeleteById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {TimelineAnalysisFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApi
     */
    public tlAnalysisControllerFind(filter?: TimelineAnalysisFilter1, options?: any) {
        return TlAnalysisControllerApiFp(this.configuration).tlAnalysisControllerFind(filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {TimelineAnalysisFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApi
     */
    public tlAnalysisControllerFindById(id: number, filter?: TimelineAnalysisFilter, options?: any) {
        return TlAnalysisControllerApiFp(this.configuration).tlAnalysisControllerFindById(id, filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {TimelineAnalysis} [timelineAnalysis] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApi
     */
    public tlAnalysisControllerReplaceById(id: number, timelineAnalysis?: TimelineAnalysis, options?: any) {
        return TlAnalysisControllerApiFp(this.configuration).tlAnalysisControllerReplaceById(id, timelineAnalysis, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TimelineAnalysisPartial} [timelineAnalysisPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApi
     */
    public tlAnalysisControllerUpdateAll(where?: { [key: string]: object; }, timelineAnalysisPartial?: TimelineAnalysisPartial, options?: any) {
        return TlAnalysisControllerApiFp(this.configuration).tlAnalysisControllerUpdateAll(where, timelineAnalysisPartial, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {TimelineAnalysisPartial} [timelineAnalysisPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TlAnalysisControllerApi
     */
    public tlAnalysisControllerUpdateById(id: number, timelineAnalysisPartial?: TimelineAnalysisPartial, options?: any) {
        return TlAnalysisControllerApiFp(this.configuration).tlAnalysisControllerUpdateById(id, timelineAnalysisPartial, options)(this.axios, this.basePath);
    }

}


/**
 * UserControllerApi - axios parameter creator
 * @export
 */
export const UserControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUserinfo(authorization?: string, options: any = {}): RequestArgs {
            const localVarPath = `/userinfo`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserControllerApi - functional programming interface
 * @export
 */
export const UserControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUserinfo(authorization?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserInfo> {
            const localVarAxiosArgs = UserControllerApiAxiosParamCreator(configuration).userControllerUserinfo(authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserControllerApi - factory interface
 * @export
 */
export const UserControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} [authorization] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUserinfo(authorization?: string, options?: any): AxiosPromise<UserInfo> {
            return UserControllerApiFp(configuration).userControllerUserinfo(authorization, options)(axios, basePath);
        },
    };
};

/**
 * UserControllerApi - interface
 * @export
 * @interface UserControllerApi
 */
export interface UserControllerApiInterface {
    /**
     * 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApiInterface
     */
    userControllerUserinfo(authorization?: string, options?: any): AxiosPromise<UserInfo>;

}

/**
 * UserControllerApi - object-oriented interface
 * @export
 * @class UserControllerApi
 * @extends {BaseAPI}
 */
export class UserControllerApi extends BaseAPI implements UserControllerApiInterface {
    /**
     * 
     * @param {string} [authorization] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserControllerApi
     */
    public userControllerUserinfo(authorization?: string, options?: any) {
        return UserControllerApiFp(this.configuration).userControllerUserinfo(authorization, options)(this.axios, this.basePath);
    }

}


/**
 * UserTrackControllerApi - axios parameter creator
 * @export
 */
export const UserTrackControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTrackControllerGetAll(options: any = {}): RequestArgs {
            const localVarPath = `/user-tracks`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserTrackControllerApi - functional programming interface
 * @export
 */
export const UserTrackControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTrackControllerGetAll(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserTrack>> {
            const localVarAxiosArgs = UserTrackControllerApiAxiosParamCreator(configuration).userTrackControllerGetAll(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * UserTrackControllerApi - factory interface
 * @export
 */
export const UserTrackControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTrackControllerGetAll(options?: any): AxiosPromise<Array<UserTrack>> {
            return UserTrackControllerApiFp(configuration).userTrackControllerGetAll(options)(axios, basePath);
        },
    };
};

/**
 * UserTrackControllerApi - interface
 * @export
 * @interface UserTrackControllerApi
 */
export interface UserTrackControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTrackControllerApiInterface
     */
    userTrackControllerGetAll(options?: any): AxiosPromise<Array<UserTrack>>;

}

/**
 * UserTrackControllerApi - object-oriented interface
 * @export
 * @class UserTrackControllerApi
 * @extends {BaseAPI}
 */
export class UserTrackControllerApi extends BaseAPI implements UserTrackControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTrackControllerApi
     */
    public userTrackControllerGetAll(options?: any) {
        return UserTrackControllerApiFp(this.configuration).userTrackControllerGetAll(options)(this.axios, this.basePath);
    }

}


/**
 * WorkspaceControllerApi - axios parameter creator
 * @export
 */
export const WorkspaceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceControllerDeleteById(authorization: string, options: any = {}): RequestArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling workspaceControllerDeleteById.');
            }
            const localVarPath = `/workspace-sessions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {WorkspaceSessionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceControllerFindById(id: string, filter?: WorkspaceSessionFilter, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling workspaceControllerFindById.');
            }
            const localVarPath = `/workspace-sessions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} authorization 
         * @param {boolean} enableTrack 
         * @param {string} [projectArchiveName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceControllerGetContainer(authorization: string, enableTrack: boolean, projectArchiveName?: string, options: any = {}): RequestArgs {
            // verify required parameter 'authorization' is not null or undefined
            if (authorization === null || authorization === undefined) {
                throw new RequiredError('authorization','Required parameter authorization was null or undefined when calling workspaceControllerGetContainer.');
            }
            // verify required parameter 'enableTrack' is not null or undefined
            if (enableTrack === null || enableTrack === undefined) {
                throw new RequiredError('enableTrack','Required parameter enableTrack was null or undefined when calling workspaceControllerGetContainer.');
            }
            const localVarPath = `/workspace-sessions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (enableTrack !== undefined) {
                localVarQueryParameter['enableTrack'] = enableTrack;
            }

            if (projectArchiveName !== undefined) {
                localVarQueryParameter['projectArchiveName'] = projectArchiveName;
            }

            if (authorization !== undefined && authorization !== null) {
                localVarHeaderParameter['Authorization'] = String(authorization);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkspaceControllerApi - functional programming interface
 * @export
 */
export const WorkspaceControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceControllerDeleteById(authorization: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceControllerApiAxiosParamCreator(configuration).workspaceControllerDeleteById(authorization, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {WorkspaceSessionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceControllerFindById(id: string, filter?: WorkspaceSessionFilter, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceSessionWithRelations> {
            const localVarAxiosArgs = WorkspaceControllerApiAxiosParamCreator(configuration).workspaceControllerFindById(id, filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} authorization 
         * @param {boolean} enableTrack 
         * @param {string} [projectArchiveName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceControllerGetContainer(authorization: string, enableTrack: boolean, projectArchiveName?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkspaceSession> {
            const localVarAxiosArgs = WorkspaceControllerApiAxiosParamCreator(configuration).workspaceControllerGetContainer(authorization, enableTrack, projectArchiveName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WorkspaceControllerApi - factory interface
 * @export
 */
export const WorkspaceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} authorization 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceControllerDeleteById(authorization: string, options?: any): AxiosPromise<void> {
            return WorkspaceControllerApiFp(configuration).workspaceControllerDeleteById(authorization, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {WorkspaceSessionFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceControllerFindById(id: string, filter?: WorkspaceSessionFilter, options?: any): AxiosPromise<WorkspaceSessionWithRelations> {
            return WorkspaceControllerApiFp(configuration).workspaceControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} authorization 
         * @param {boolean} enableTrack 
         * @param {string} [projectArchiveName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        workspaceControllerGetContainer(authorization: string, enableTrack: boolean, projectArchiveName?: string, options?: any): AxiosPromise<WorkspaceSession> {
            return WorkspaceControllerApiFp(configuration).workspaceControllerGetContainer(authorization, enableTrack, projectArchiveName, options)(axios, basePath);
        },
    };
};

/**
 * WorkspaceControllerApi - interface
 * @export
 * @interface WorkspaceControllerApi
 */
export interface WorkspaceControllerApiInterface {
    /**
     * 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceControllerApiInterface
     */
    workspaceControllerDeleteById(authorization: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {string} id 
     * @param {WorkspaceSessionFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceControllerApiInterface
     */
    workspaceControllerFindById(id: string, filter?: WorkspaceSessionFilter, options?: any): AxiosPromise<WorkspaceSessionWithRelations>;

    /**
     * 
     * @param {string} authorization 
     * @param {boolean} enableTrack 
     * @param {string} [projectArchiveName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceControllerApiInterface
     */
    workspaceControllerGetContainer(authorization: string, enableTrack: boolean, projectArchiveName?: string, options?: any): AxiosPromise<WorkspaceSession>;

}

/**
 * WorkspaceControllerApi - object-oriented interface
 * @export
 * @class WorkspaceControllerApi
 * @extends {BaseAPI}
 */
export class WorkspaceControllerApi extends BaseAPI implements WorkspaceControllerApiInterface {
    /**
     * 
     * @param {string} authorization 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceControllerApi
     */
    public workspaceControllerDeleteById(authorization: string, options?: any) {
        return WorkspaceControllerApiFp(this.configuration).workspaceControllerDeleteById(authorization, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {WorkspaceSessionFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceControllerApi
     */
    public workspaceControllerFindById(id: string, filter?: WorkspaceSessionFilter, options?: any) {
        return WorkspaceControllerApiFp(this.configuration).workspaceControllerFindById(id, filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} authorization 
     * @param {boolean} enableTrack 
     * @param {string} [projectArchiveName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceControllerApi
     */
    public workspaceControllerGetContainer(authorization: string, enableTrack: boolean, projectArchiveName?: string, options?: any) {
        return WorkspaceControllerApiFp(this.configuration).workspaceControllerGetContainer(authorization, enableTrack, projectArchiveName, options)(this.axios, this.basePath);
    }

}


