// tslint:disable
/**
 * exam-back
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Answer
 */
export interface Answer {
    /**
     * 
     * @type {number}
     * @memberof Answer
     */
    question: number;
    /**
     * 
     * @type {number}
     * @memberof Answer
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof Answer
     */
    user: string;
}
/**
 * (Schema options: { partial: true })
 * @export
 * @interface AnswerPartial
 */
export interface AnswerPartial {
    /**
     * 
     * @type {number}
     * @memberof AnswerPartial
     */
    question?: number;
    /**
     * 
     * @type {number}
     * @memberof AnswerPartial
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof AnswerPartial
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof AnswerPartial
     */
    user?: string;
}
/**
 * (Schema options: { includeRelations: true })
 * @export
 * @interface AnswerWithRelations
 */
export interface AnswerWithRelations {
    /**
     * 
     * @type {number}
     * @memberof AnswerWithRelations
     */
    question: number;
    /**
     * 
     * @type {number}
     * @memberof AnswerWithRelations
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof AnswerWithRelations
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof AnswerWithRelations
     */
    user: string;
}
/**
 * 
 * @export
 * @interface LoopbackCount
 */
export interface LoopbackCount {
    /**
     * 
     * @type {number}
     * @memberof LoopbackCount
     */
    count?: number;
}
/**
 * (Schema options: { title: \'NewAnswer\', exclude: [ \'id\' ] })
 * @export
 * @interface NewAnswer
 */
export interface NewAnswer {
    /**
     * 
     * @type {number}
     * @memberof NewAnswer
     */
    question: number;
    /**
     * 
     * @type {string}
     * @memberof NewAnswer
     */
    content: string;
    /**
     * 
     * @type {string}
     * @memberof NewAnswer
     */
    user: string;
}
/**
 * (Schema options: { title: \'NewQuestion\', exclude: [ \'id\' ] })
 * @export
 * @interface NewQuestion
 */
export interface NewQuestion {
    /**
     * 
     * @type {string}
     * @memberof NewQuestion
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof NewQuestion
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof NewQuestion
     */
    score?: string;
    /**
     * 
     * @type {string}
     * @memberof NewQuestion
     */
    brief?: string;
    /**
     * 
     * @type {string}
     * @memberof NewQuestion
     */
    detail: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof NewQuestion
     */
    examples?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof NewQuestion
     */
    examination?: number;
    /**
     * 
     * @type {string}
     * @memberof NewQuestion
     */
    templateName?: string;
}
/**
 * (Schema options: { title: \'NewRecord\' })
 * @export
 * @interface NewRecord
 */
export interface NewRecord {
    /**
     * 
     * @type {number}
     * @memberof NewRecord
     */
    answerID: number;
    /**
     * 
     * @type {string}
     * @memberof NewRecord
     */
    startTime: string;
    /**
     * 
     * @type {string}
     * @memberof NewRecord
     */
    endTime: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NewRecord
     */
    timeline: Array<string>;
}
/**
 * (Schema options: { title: \'NewTemplate\' })
 * @export
 * @interface NewTemplate
 */
export interface NewTemplate {
    /**
     * 
     * @type {string}
     * @memberof NewTemplate
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof NewTemplate
     */
    content: string;
}
/**
 * 
 * @export
 * @interface PingResponse
 */
export interface PingResponse {
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    greeting?: string;
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof PingResponse
     */
    url?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof PingResponse
     */
    headers?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface Question
 */
export interface Question {
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    score?: string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    brief?: string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    detail: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof Question
     */
    examples?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof Question
     */
    examination?: number;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    templateName?: string;
}
/**
 * (Schema options: { partial: true })
 * @export
 * @interface QuestionPartial
 */
export interface QuestionPartial {
    /**
     * 
     * @type {number}
     * @memberof QuestionPartial
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionPartial
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionPartial
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionPartial
     */
    score?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionPartial
     */
    brief?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionPartial
     */
    detail?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof QuestionPartial
     */
    examples?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof QuestionPartial
     */
    examination?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionPartial
     */
    templateName?: string;
}
/**
 * (Schema options: { includeRelations: true })
 * @export
 * @interface QuestionWithRelations
 */
export interface QuestionWithRelations {
    /**
     * 
     * @type {number}
     * @memberof QuestionWithRelations
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionWithRelations
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionWithRelations
     */
    author?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionWithRelations
     */
    score?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionWithRelations
     */
    brief?: string;
    /**
     * 
     * @type {string}
     * @memberof QuestionWithRelations
     */
    detail: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof QuestionWithRelations
     */
    examples?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof QuestionWithRelations
     */
    examination?: number;
    /**
     * 
     * @type {string}
     * @memberof QuestionWithRelations
     */
    templateName?: string;
}
/**
 * 
 * @export
 * @interface Record
 */
export interface Record {
    /**
     * 
     * @type {number}
     * @memberof Record
     */
    answerID: number;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    startTime: string;
    /**
     * 
     * @type {string}
     * @memberof Record
     */
    endTime: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Record
     */
    timeline: Array<string>;
}
/**
 * (Schema options: { partial: true })
 * @export
 * @interface RecordPartial
 */
export interface RecordPartial {
    /**
     * 
     * @type {number}
     * @memberof RecordPartial
     */
    answerID?: number;
    /**
     * 
     * @type {string}
     * @memberof RecordPartial
     */
    startTime?: string;
    /**
     * 
     * @type {string}
     * @memberof RecordPartial
     */
    endTime?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecordPartial
     */
    timeline?: Array<string>;
}
/**
 * (Schema options: { includeRelations: true })
 * @export
 * @interface RecordWithRelations
 */
export interface RecordWithRelations {
    /**
     * 
     * @type {number}
     * @memberof RecordWithRelations
     */
    answerID: number;
    /**
     * 
     * @type {string}
     * @memberof RecordWithRelations
     */
    startTime: string;
    /**
     * 
     * @type {string}
     * @memberof RecordWithRelations
     */
    endTime: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecordWithRelations
     */
    timeline: Array<string>;
}
/**
 * 
 * @export
 * @interface Template
 */
export interface Template {
    /**
     * 
     * @type {string}
     * @memberof Template
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Template
     */
    content: string;
}
/**
 * (Schema options: { partial: true })
 * @export
 * @interface TemplatePartial
 */
export interface TemplatePartial {
    /**
     * 
     * @type {string}
     * @memberof TemplatePartial
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof TemplatePartial
     */
    content?: string;
}
/**
 * (Schema options: { includeRelations: true })
 * @export
 * @interface TemplateWithRelations
 */
export interface TemplateWithRelations {
    /**
     * 
     * @type {string}
     * @memberof TemplateWithRelations
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TemplateWithRelations
     */
    content: string;
}

/**
 * AnswerControllerApi - axios parameter creator
 * @export
 */
export const AnswerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerCount(where?: { [key: string]: object; }, options: any = {}): RequestArgs {
            const localVarPath = `/answers/count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewAnswer} [newAnswer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerCreate(newAnswer?: NewAnswer, options: any = {}): RequestArgs {
            const localVarPath = `/answers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof newAnswer !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newAnswer !== undefined ? newAnswer : {}) : (newAnswer || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerDeleteById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling answerControllerDeleteById.');
            }
            const localVarPath = `/answers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerFind(filter?: object, options: any = {}): RequestArgs {
            const localVarPath = `/answers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerFindById(id: number, filter?: object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling answerControllerFindById.');
            }
            const localVarPath = `/answers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Answer} [answer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerReplaceById(id: number, answer?: Answer, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling answerControllerReplaceById.');
            }
            const localVarPath = `/answers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof answer !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(answer !== undefined ? answer : {}) : (answer || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {AnswerPartial} [answerPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerUpdateAll(where?: { [key: string]: object; }, answerPartial?: AnswerPartial, options: any = {}): RequestArgs {
            const localVarPath = `/answers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof answerPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(answerPartial !== undefined ? answerPartial : {}) : (answerPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AnswerPartial} [answerPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerUpdateById(id: number, answerPartial?: AnswerPartial, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling answerControllerUpdateById.');
            }
            const localVarPath = `/answers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof answerPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(answerPartial !== undefined ? answerPartial : {}) : (answerPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AnswerControllerApi - functional programming interface
 * @export
 */
export const AnswerControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerCount(where?: { [key: string]: object; }, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerCount(where, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NewAnswer} [newAnswer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerCreate(newAnswer?: NewAnswer, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Answer> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerCreate(newAnswer, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerDeleteById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerDeleteById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerFind(filter?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnswerWithRelations>> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerFind(filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerFindById(id: number, filter?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnswerWithRelations> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerFindById(id, filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Answer} [answer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerReplaceById(id: number, answer?: Answer, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerReplaceById(id, answer, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {AnswerPartial} [answerPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerUpdateAll(where?: { [key: string]: object; }, answerPartial?: AnswerPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerUpdateAll(where, answerPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AnswerPartial} [answerPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerUpdateById(id: number, answerPartial?: AnswerPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = AnswerControllerApiAxiosParamCreator(configuration).answerControllerUpdateById(id, answerPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AnswerControllerApi - factory interface
 * @export
 */
export const AnswerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return AnswerControllerApiFp(configuration).answerControllerCount(where, options)(axios, basePath);
        },
        /**
         * 
         * @param {NewAnswer} [newAnswer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerCreate(newAnswer?: NewAnswer, options?: any): AxiosPromise<Answer> {
            return AnswerControllerApiFp(configuration).answerControllerCreate(newAnswer, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerDeleteById(id: number, options?: any): AxiosPromise<void> {
            return AnswerControllerApiFp(configuration).answerControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerFind(filter?: object, options?: any): AxiosPromise<Array<AnswerWithRelations>> {
            return AnswerControllerApiFp(configuration).answerControllerFind(filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerFindById(id: number, filter?: object, options?: any): AxiosPromise<AnswerWithRelations> {
            return AnswerControllerApiFp(configuration).answerControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Answer} [answer] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerReplaceById(id: number, answer?: Answer, options?: any): AxiosPromise<void> {
            return AnswerControllerApiFp(configuration).answerControllerReplaceById(id, answer, options)(axios, basePath);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {AnswerPartial} [answerPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerUpdateAll(where?: { [key: string]: object; }, answerPartial?: AnswerPartial, options?: any): AxiosPromise<LoopbackCount> {
            return AnswerControllerApiFp(configuration).answerControllerUpdateAll(where, answerPartial, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {AnswerPartial} [answerPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerControllerUpdateById(id: number, answerPartial?: AnswerPartial, options?: any): AxiosPromise<void> {
            return AnswerControllerApiFp(configuration).answerControllerUpdateById(id, answerPartial, options)(axios, basePath);
        },
    };
};

/**
 * AnswerControllerApi - interface
 * @export
 * @interface AnswerControllerApi
 */
export interface AnswerControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {NewAnswer} [newAnswer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerCreate(newAnswer?: NewAnswer, options?: any): AxiosPromise<Answer>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerDeleteById(id: number, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerFind(filter?: object, options?: any): AxiosPromise<Array<AnswerWithRelations>>;

    /**
     * 
     * @param {number} id 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerFindById(id: number, filter?: object, options?: any): AxiosPromise<AnswerWithRelations>;

    /**
     * 
     * @param {number} id 
     * @param {Answer} [answer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerReplaceById(id: number, answer?: Answer, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {AnswerPartial} [answerPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerUpdateAll(where?: { [key: string]: object; }, answerPartial?: AnswerPartial, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {number} id 
     * @param {AnswerPartial} [answerPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApiInterface
     */
    answerControllerUpdateById(id: number, answerPartial?: AnswerPartial, options?: any): AxiosPromise<void>;

}

/**
 * AnswerControllerApi - object-oriented interface
 * @export
 * @class AnswerControllerApi
 * @extends {BaseAPI}
 */
export class AnswerControllerApi extends BaseAPI implements AnswerControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerCount(where?: { [key: string]: object; }, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerCount(where, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {NewAnswer} [newAnswer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerCreate(newAnswer?: NewAnswer, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerCreate(newAnswer, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerDeleteById(id: number, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerDeleteById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerFind(filter?: object, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerFind(filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerFindById(id: number, filter?: object, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerFindById(id, filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {Answer} [answer] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerReplaceById(id: number, answer?: Answer, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerReplaceById(id, answer, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {AnswerPartial} [answerPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerUpdateAll(where?: { [key: string]: object; }, answerPartial?: AnswerPartial, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerUpdateAll(where, answerPartial, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {AnswerPartial} [answerPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AnswerControllerApi
     */
    public answerControllerUpdateById(id: number, answerPartial?: AnswerPartial, options?: any) {
        return AnswerControllerApiFp(this.configuration).answerControllerUpdateById(id, answerPartial, options)(this.axios, this.basePath);
    }

}


/**
 * PingControllerApi - axios parameter creator
 * @export
 */
export const PingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingControllerPing(options: any = {}): RequestArgs {
            const localVarPath = `/ping`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PingControllerApi - functional programming interface
 * @export
 */
export const PingControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingControllerPing(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PingResponse> {
            const localVarAxiosArgs = PingControllerApiAxiosParamCreator(configuration).pingControllerPing(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PingControllerApi - factory interface
 * @export
 */
export const PingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingControllerPing(options?: any): AxiosPromise<PingResponse> {
            return PingControllerApiFp(configuration).pingControllerPing(options)(axios, basePath);
        },
    };
};

/**
 * PingControllerApi - interface
 * @export
 * @interface PingControllerApi
 */
export interface PingControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingControllerApiInterface
     */
    pingControllerPing(options?: any): AxiosPromise<PingResponse>;

}

/**
 * PingControllerApi - object-oriented interface
 * @export
 * @class PingControllerApi
 * @extends {BaseAPI}
 */
export class PingControllerApi extends BaseAPI implements PingControllerApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingControllerApi
     */
    public pingControllerPing(options?: any) {
        return PingControllerApiFp(this.configuration).pingControllerPing(options)(this.axios, this.basePath);
    }

}


/**
 * QuestionControllerApi - axios parameter creator
 * @export
 */
export const QuestionControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerCount(where?: { [key: string]: object; }, options: any = {}): RequestArgs {
            const localVarPath = `/questions/count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewQuestion} [newQuestion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerCreate(newQuestion?: NewQuestion, options: any = {}): RequestArgs {
            const localVarPath = `/questions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof newQuestion !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newQuestion !== undefined ? newQuestion : {}) : (newQuestion || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerDeleteById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling questionControllerDeleteById.');
            }
            const localVarPath = `/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerFind(filter?: object, options: any = {}): RequestArgs {
            const localVarPath = `/questions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerFindById(id: number, filter?: object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling questionControllerFindById.');
            }
            const localVarPath = `/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Question} [question] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerReplaceById(id: number, question?: Question, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling questionControllerReplaceById.');
            }
            const localVarPath = `/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof question !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(question !== undefined ? question : {}) : (question || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {QuestionPartial} [questionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerUpdateAll(where?: { [key: string]: object; }, questionPartial?: QuestionPartial, options: any = {}): RequestArgs {
            const localVarPath = `/questions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof questionPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(questionPartial !== undefined ? questionPartial : {}) : (questionPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {QuestionPartial} [questionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerUpdateById(id: number, questionPartial?: QuestionPartial, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling questionControllerUpdateById.');
            }
            const localVarPath = `/questions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof questionPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(questionPartial !== undefined ? questionPartial : {}) : (questionPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QuestionControllerApi - functional programming interface
 * @export
 */
export const QuestionControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerCount(where?: { [key: string]: object; }, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerCount(where, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NewQuestion} [newQuestion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerCreate(newQuestion?: NewQuestion, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Question> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerCreate(newQuestion, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerDeleteById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerDeleteById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerFind(filter?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuestionWithRelations>> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerFind(filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerFindById(id: number, filter?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuestionWithRelations> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerFindById(id, filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Question} [question] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerReplaceById(id: number, question?: Question, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerReplaceById(id, question, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {QuestionPartial} [questionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerUpdateAll(where?: { [key: string]: object; }, questionPartial?: QuestionPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerUpdateAll(where, questionPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {QuestionPartial} [questionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerUpdateById(id: number, questionPartial?: QuestionPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = QuestionControllerApiAxiosParamCreator(configuration).questionControllerUpdateById(id, questionPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * QuestionControllerApi - factory interface
 * @export
 */
export const QuestionControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return QuestionControllerApiFp(configuration).questionControllerCount(where, options)(axios, basePath);
        },
        /**
         * 
         * @param {NewQuestion} [newQuestion] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerCreate(newQuestion?: NewQuestion, options?: any): AxiosPromise<Question> {
            return QuestionControllerApiFp(configuration).questionControllerCreate(newQuestion, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerDeleteById(id: number, options?: any): AxiosPromise<void> {
            return QuestionControllerApiFp(configuration).questionControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerFind(filter?: object, options?: any): AxiosPromise<Array<QuestionWithRelations>> {
            return QuestionControllerApiFp(configuration).questionControllerFind(filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerFindById(id: number, filter?: object, options?: any): AxiosPromise<QuestionWithRelations> {
            return QuestionControllerApiFp(configuration).questionControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Question} [question] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerReplaceById(id: number, question?: Question, options?: any): AxiosPromise<void> {
            return QuestionControllerApiFp(configuration).questionControllerReplaceById(id, question, options)(axios, basePath);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {QuestionPartial} [questionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerUpdateAll(where?: { [key: string]: object; }, questionPartial?: QuestionPartial, options?: any): AxiosPromise<LoopbackCount> {
            return QuestionControllerApiFp(configuration).questionControllerUpdateAll(where, questionPartial, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {QuestionPartial} [questionPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionControllerUpdateById(id: number, questionPartial?: QuestionPartial, options?: any): AxiosPromise<void> {
            return QuestionControllerApiFp(configuration).questionControllerUpdateById(id, questionPartial, options)(axios, basePath);
        },
    };
};

/**
 * QuestionControllerApi - interface
 * @export
 * @interface QuestionControllerApi
 */
export interface QuestionControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {NewQuestion} [newQuestion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerCreate(newQuestion?: NewQuestion, options?: any): AxiosPromise<Question>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerDeleteById(id: number, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerFind(filter?: object, options?: any): AxiosPromise<Array<QuestionWithRelations>>;

    /**
     * 
     * @param {number} id 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerFindById(id: number, filter?: object, options?: any): AxiosPromise<QuestionWithRelations>;

    /**
     * 
     * @param {number} id 
     * @param {Question} [question] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerReplaceById(id: number, question?: Question, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {QuestionPartial} [questionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerUpdateAll(where?: { [key: string]: object; }, questionPartial?: QuestionPartial, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {number} id 
     * @param {QuestionPartial} [questionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApiInterface
     */
    questionControllerUpdateById(id: number, questionPartial?: QuestionPartial, options?: any): AxiosPromise<void>;

}

/**
 * QuestionControllerApi - object-oriented interface
 * @export
 * @class QuestionControllerApi
 * @extends {BaseAPI}
 */
export class QuestionControllerApi extends BaseAPI implements QuestionControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerCount(where?: { [key: string]: object; }, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerCount(where, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {NewQuestion} [newQuestion] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerCreate(newQuestion?: NewQuestion, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerCreate(newQuestion, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerDeleteById(id: number, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerDeleteById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerFind(filter?: object, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerFind(filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerFindById(id: number, filter?: object, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerFindById(id, filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {Question} [question] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerReplaceById(id: number, question?: Question, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerReplaceById(id, question, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {QuestionPartial} [questionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerUpdateAll(where?: { [key: string]: object; }, questionPartial?: QuestionPartial, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerUpdateAll(where, questionPartial, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {QuestionPartial} [questionPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QuestionControllerApi
     */
    public questionControllerUpdateById(id: number, questionPartial?: QuestionPartial, options?: any) {
        return QuestionControllerApiFp(this.configuration).questionControllerUpdateById(id, questionPartial, options)(this.axios, this.basePath);
    }

}


/**
 * RecordControllerApi - axios parameter creator
 * @export
 */
export const RecordControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerCount(where?: { [key: string]: object; }, options: any = {}): RequestArgs {
            const localVarPath = `/records/count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewRecord} [newRecord] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerCreate(newRecord?: NewRecord, options: any = {}): RequestArgs {
            const localVarPath = `/records`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof newRecord !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newRecord !== undefined ? newRecord : {}) : (newRecord || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerDeleteById(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling recordControllerDeleteById.');
            }
            const localVarPath = `/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerFind(filter?: object, options: any = {}): RequestArgs {
            const localVarPath = `/records`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerFindById(id: number, filter?: object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling recordControllerFindById.');
            }
            const localVarPath = `/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Record} [record] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerReplaceById(id: number, record?: Record, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling recordControllerReplaceById.');
            }
            const localVarPath = `/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof record !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(record !== undefined ? record : {}) : (record || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RecordPartial} [recordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerUpdateAll(where?: { [key: string]: object; }, recordPartial?: RecordPartial, options: any = {}): RequestArgs {
            const localVarPath = `/records`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof recordPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(recordPartial !== undefined ? recordPartial : {}) : (recordPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RecordPartial} [recordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerUpdateById(id: number, recordPartial?: RecordPartial, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling recordControllerUpdateById.');
            }
            const localVarPath = `/records/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof recordPartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(recordPartial !== undefined ? recordPartial : {}) : (recordPartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecordControllerApi - functional programming interface
 * @export
 */
export const RecordControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerCount(where?: { [key: string]: object; }, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerCount(where, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NewRecord} [newRecord] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerCreate(newRecord?: NewRecord, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Record> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerCreate(newRecord, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerDeleteById(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerDeleteById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerFind(filter?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecordWithRelations>> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerFind(filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerFindById(id: number, filter?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordWithRelations> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerFindById(id, filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Record} [record] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerReplaceById(id: number, record?: Record, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerReplaceById(id, record, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RecordPartial} [recordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerUpdateAll(where?: { [key: string]: object; }, recordPartial?: RecordPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerUpdateAll(where, recordPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {RecordPartial} [recordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerUpdateById(id: number, recordPartial?: RecordPartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = RecordControllerApiAxiosParamCreator(configuration).recordControllerUpdateById(id, recordPartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RecordControllerApi - factory interface
 * @export
 */
export const RecordControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return RecordControllerApiFp(configuration).recordControllerCount(where, options)(axios, basePath);
        },
        /**
         * 
         * @param {NewRecord} [newRecord] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerCreate(newRecord?: NewRecord, options?: any): AxiosPromise<Record> {
            return RecordControllerApiFp(configuration).recordControllerCreate(newRecord, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerDeleteById(id: number, options?: any): AxiosPromise<void> {
            return RecordControllerApiFp(configuration).recordControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerFind(filter?: object, options?: any): AxiosPromise<Array<RecordWithRelations>> {
            return RecordControllerApiFp(configuration).recordControllerFind(filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerFindById(id: number, filter?: object, options?: any): AxiosPromise<RecordWithRelations> {
            return RecordControllerApiFp(configuration).recordControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {Record} [record] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerReplaceById(id: number, record?: Record, options?: any): AxiosPromise<void> {
            return RecordControllerApiFp(configuration).recordControllerReplaceById(id, record, options)(axios, basePath);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {RecordPartial} [recordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerUpdateAll(where?: { [key: string]: object; }, recordPartial?: RecordPartial, options?: any): AxiosPromise<LoopbackCount> {
            return RecordControllerApiFp(configuration).recordControllerUpdateAll(where, recordPartial, options)(axios, basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {RecordPartial} [recordPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordControllerUpdateById(id: number, recordPartial?: RecordPartial, options?: any): AxiosPromise<void> {
            return RecordControllerApiFp(configuration).recordControllerUpdateById(id, recordPartial, options)(axios, basePath);
        },
    };
};

/**
 * RecordControllerApi - interface
 * @export
 * @interface RecordControllerApi
 */
export interface RecordControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {NewRecord} [newRecord] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerCreate(newRecord?: NewRecord, options?: any): AxiosPromise<Record>;

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerDeleteById(id: number, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerFind(filter?: object, options?: any): AxiosPromise<Array<RecordWithRelations>>;

    /**
     * 
     * @param {number} id 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerFindById(id: number, filter?: object, options?: any): AxiosPromise<RecordWithRelations>;

    /**
     * 
     * @param {number} id 
     * @param {Record} [record] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerReplaceById(id: number, record?: Record, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {RecordPartial} [recordPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerUpdateAll(where?: { [key: string]: object; }, recordPartial?: RecordPartial, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {number} id 
     * @param {RecordPartial} [recordPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApiInterface
     */
    recordControllerUpdateById(id: number, recordPartial?: RecordPartial, options?: any): AxiosPromise<void>;

}

/**
 * RecordControllerApi - object-oriented interface
 * @export
 * @class RecordControllerApi
 * @extends {BaseAPI}
 */
export class RecordControllerApi extends BaseAPI implements RecordControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerCount(where?: { [key: string]: object; }, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerCount(where, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {NewRecord} [newRecord] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerCreate(newRecord?: NewRecord, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerCreate(newRecord, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerDeleteById(id: number, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerDeleteById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerFind(filter?: object, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerFind(filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerFindById(id: number, filter?: object, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerFindById(id, filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {Record} [record] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerReplaceById(id: number, record?: Record, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerReplaceById(id, record, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {RecordPartial} [recordPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerUpdateAll(where?: { [key: string]: object; }, recordPartial?: RecordPartial, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerUpdateAll(where, recordPartial, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {number} id 
     * @param {RecordPartial} [recordPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecordControllerApi
     */
    public recordControllerUpdateById(id: number, recordPartial?: RecordPartial, options?: any) {
        return RecordControllerApiFp(this.configuration).recordControllerUpdateById(id, recordPartial, options)(this.axios, this.basePath);
    }

}


/**
 * TemplateControllerApi - axios parameter creator
 * @export
 */
export const TemplateControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerCount(where?: { [key: string]: object; }, options: any = {}): RequestArgs {
            const localVarPath = `/templates/count`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NewTemplate} [newTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerCreate(newTemplate?: NewTemplate, options: any = {}): RequestArgs {
            const localVarPath = `/templates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof newTemplate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(newTemplate !== undefined ? newTemplate : {}) : (newTemplate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerDeleteById(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling templateControllerDeleteById.');
            }
            const localVarPath = `/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerFind(filter?: object, options: any = {}): RequestArgs {
            const localVarPath = `/templates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerFindById(id: string, filter?: object, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling templateControllerFindById.');
            }
            const localVarPath = `/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Template} [template] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerReplaceById(id: string, template?: Template, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling templateControllerReplaceById.');
            }
            const localVarPath = `/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof template !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(template !== undefined ? template : {}) : (template || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TemplatePartial} [templatePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerUpdateAll(where?: { [key: string]: object; }, templatePartial?: TemplatePartial, options: any = {}): RequestArgs {
            const localVarPath = `/templates`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof templatePartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(templatePartial !== undefined ? templatePartial : {}) : (templatePartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {TemplatePartial} [templatePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerUpdateById(id: string, templatePartial?: TemplatePartial, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling templateControllerUpdateById.');
            }
            const localVarPath = `/templates/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof templatePartial !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(templatePartial !== undefined ? templatePartial : {}) : (templatePartial || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplateControllerApi - functional programming interface
 * @export
 */
export const TemplateControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerCount(where?: { [key: string]: object; }, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerCount(where, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {NewTemplate} [newTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerCreate(newTemplate?: NewTemplate, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Template> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerCreate(newTemplate, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerDeleteById(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerDeleteById(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerFind(filter?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TemplateWithRelations>> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerFind(filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerFindById(id: string, filter?: object, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateWithRelations> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerFindById(id, filter, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {Template} [template] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerReplaceById(id: string, template?: Template, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerReplaceById(id, template, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TemplatePartial} [templatePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerUpdateAll(where?: { [key: string]: object; }, templatePartial?: TemplatePartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoopbackCount> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerUpdateAll(where, templatePartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {TemplatePartial} [templatePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerUpdateById(id: string, templatePartial?: TemplatePartial, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = TemplateControllerApiAxiosParamCreator(configuration).templateControllerUpdateById(id, templatePartial, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TemplateControllerApi - factory interface
 * @export
 */
export const TemplateControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount> {
            return TemplateControllerApiFp(configuration).templateControllerCount(where, options)(axios, basePath);
        },
        /**
         * 
         * @param {NewTemplate} [newTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerCreate(newTemplate?: NewTemplate, options?: any): AxiosPromise<Template> {
            return TemplateControllerApiFp(configuration).templateControllerCreate(newTemplate, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerDeleteById(id: string, options?: any): AxiosPromise<void> {
            return TemplateControllerApiFp(configuration).templateControllerDeleteById(id, options)(axios, basePath);
        },
        /**
         * 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerFind(filter?: object, options?: any): AxiosPromise<Array<TemplateWithRelations>> {
            return TemplateControllerApiFp(configuration).templateControllerFind(filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerFindById(id: string, filter?: object, options?: any): AxiosPromise<TemplateWithRelations> {
            return TemplateControllerApiFp(configuration).templateControllerFindById(id, filter, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {Template} [template] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerReplaceById(id: string, template?: Template, options?: any): AxiosPromise<void> {
            return TemplateControllerApiFp(configuration).templateControllerReplaceById(id, template, options)(axios, basePath);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {TemplatePartial} [templatePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerUpdateAll(where?: { [key: string]: object; }, templatePartial?: TemplatePartial, options?: any): AxiosPromise<LoopbackCount> {
            return TemplateControllerApiFp(configuration).templateControllerUpdateAll(where, templatePartial, options)(axios, basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {TemplatePartial} [templatePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        templateControllerUpdateById(id: string, templatePartial?: TemplatePartial, options?: any): AxiosPromise<void> {
            return TemplateControllerApiFp(configuration).templateControllerUpdateById(id, templatePartial, options)(axios, basePath);
        },
    };
};

/**
 * TemplateControllerApi - interface
 * @export
 * @interface TemplateControllerApi
 */
export interface TemplateControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {NewTemplate} [newTemplate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerCreate(newTemplate?: NewTemplate, options?: any): AxiosPromise<Template>;

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerDeleteById(id: string, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerFind(filter?: object, options?: any): AxiosPromise<Array<TemplateWithRelations>>;

    /**
     * 
     * @param {string} id 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerFindById(id: string, filter?: object, options?: any): AxiosPromise<TemplateWithRelations>;

    /**
     * 
     * @param {string} id 
     * @param {Template} [template] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerReplaceById(id: string, template?: Template, options?: any): AxiosPromise<void>;

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TemplatePartial} [templatePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerUpdateAll(where?: { [key: string]: object; }, templatePartial?: TemplatePartial, options?: any): AxiosPromise<LoopbackCount>;

    /**
     * 
     * @param {string} id 
     * @param {TemplatePartial} [templatePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApiInterface
     */
    templateControllerUpdateById(id: string, templatePartial?: TemplatePartial, options?: any): AxiosPromise<void>;

}

/**
 * TemplateControllerApi - object-oriented interface
 * @export
 * @class TemplateControllerApi
 * @extends {BaseAPI}
 */
export class TemplateControllerApi extends BaseAPI implements TemplateControllerApiInterface {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerCount(where?: { [key: string]: object; }, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerCount(where, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {NewTemplate} [newTemplate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerCreate(newTemplate?: NewTemplate, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerCreate(newTemplate, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerDeleteById(id: string, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerDeleteById(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerFind(filter?: object, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerFind(filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {object} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerFindById(id: string, filter?: object, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerFindById(id, filter, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {Template} [template] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerReplaceById(id: string, template?: Template, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerReplaceById(id, template, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {TemplatePartial} [templatePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerUpdateAll(where?: { [key: string]: object; }, templatePartial?: TemplatePartial, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerUpdateAll(where, templatePartial, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {string} id 
     * @param {TemplatePartial} [templatePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateControllerApi
     */
    public templateControllerUpdateById(id: string, templatePartial?: TemplatePartial, options?: any) {
        return TemplateControllerApiFp(this.configuration).templateControllerUpdateById(id, templatePartial, options)(this.axios, this.basePath);
    }

}


